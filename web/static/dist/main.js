!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=5)}([function(e,t,n){var r=n(1);"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(3)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){(e.exports=n(2)(!1)).push([e.i,"header {\r\n  margin-bottom: 1em;\r\n}\r\n\r\n.chart-icon {\r\n  margin-left: 2em;\r\n}\r\n\r\n#chart-container {\r\n  height: 300px;\r\n  width: 100%;\r\n}\r\n\r\n#chart-main {\r\n  margin: 1em 0;\r\n}\r\n\r\n#search-results {\r\n    display: none;\r\n    max-height: 15em;\r\n    overflow: auto;\r\n    overflow-x: hidden;\r\n    position: absolute;\r\n    width: 100%;\r\n}\r\n\r\n#search-results img {\r\n  width: 2em;\r\n}\r\n\r\n#search-results p {\r\n  margin: 0;\r\n}\r\n\r\n#title-block {\r\n  margin: 2.5em auto 3em auto;\r\n  max-width: 40em;\r\n  text-align: center;\r\n}\r\n\r\n#title-block h1 {\r\n  margin-bottom: 0;\r\n}\r\n\r\n#title-block h2 {\r\n  margin-bottom: 0.5em;\r\n}\r\n",""])},function(e,t){e.exports=function(e){var t=[];return t.toString=function(){return this.map(function(t){var n=function(e,t){var n=e[1]||"",r=e[3];if(!r)return n;if(t&&"function"==typeof btoa){var o=function(e){return"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(e))))+" */"}(r),i=r.sources.map(function(e){return"/*# sourceURL="+r.sourceRoot+e+" */"});return[n].concat(i).concat([o]).join("\n")}return[n].join("\n")}(t,e);return t[2]?"@media "+t[2]+"{"+n+"}":n}).join("")},t.i=function(e,n){"string"==typeof e&&(e=[[null,e,""]]);for(var r={},o=0;o<this.length;o++){var i=this[o][0];"number"==typeof i&&(r[i]=!0)}for(o=0;o<e.length;o++){var a=e[o];"number"==typeof a[0]&&r[a[0]]||(n&&!a[2]?a[2]=n:n&&(a[2]="("+a[2]+") and ("+n+")"),t.push(a))}},t}},function(e,t,n){var r={},o=function(e){var t;return function(){return void 0===t&&(t=e.apply(this,arguments)),t}}(function(){return window&&document&&document.all&&!window.atob}),i=function(e){var t={};return function(e,n){if("function"==typeof e)return e();if(void 0===t[e]){var r=function(e,t){return t?t.querySelector(e):document.querySelector(e)}.call(this,e,n);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(e){r=null}t[e]=r}return t[e]}}(),a=null,s=0,l=[],c=n(4);function u(e,t){for(var n=0;n<e.length;n++){var o=e[n],i=r[o.id];if(i){i.refs++;for(var a=0;a<i.parts.length;a++)i.parts[a](o.parts[a]);for(;a<o.parts.length;a++)i.parts.push(v(o.parts[a],t))}else{var s=[];for(a=0;a<o.parts.length;a++)s.push(v(o.parts[a],t));r[o.id]={id:o.id,refs:1,parts:s}}}}function d(e,t){for(var n=[],r={},o=0;o<e.length;o++){var i=e[o],a=t.base?i[0]+t.base:i[0],s={css:i[1],media:i[2],sourceMap:i[3]};r[a]?r[a].parts.push(s):n.push(r[a]={id:a,parts:[s]})}return n}function f(e,t){var n=i(e.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=l[l.length-1];if("top"===e.insertAt)r?r.nextSibling?n.insertBefore(t,r.nextSibling):n.appendChild(t):n.insertBefore(t,n.firstChild),l.push(t);else if("bottom"===e.insertAt)n.appendChild(t);else{if("object"!=typeof e.insertAt||!e.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var o=i(e.insertAt.before,n);n.insertBefore(t,o)}}function p(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var t=l.indexOf(e);t>=0&&l.splice(t,1)}function m(e){var t=document.createElement("style");if(void 0===e.attrs.type&&(e.attrs.type="text/css"),void 0===e.attrs.nonce){var r=function(){0;return n.nc}();r&&(e.attrs.nonce=r)}return h(t,e.attrs),f(e,t),t}function h(e,t){Object.keys(t).forEach(function(n){e.setAttribute(n,t[n])})}function v(e,t){var n,r,o,i;if(t.transform&&e.css){if(!(i=t.transform(e.css)))return function(){};e.css=i}if(t.singleton){var l=s++;n=a||(a=m(t)),r=b.bind(null,n,l,!1),o=b.bind(null,n,l,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(e){var t=document.createElement("link");return void 0===e.attrs.type&&(e.attrs.type="text/css"),e.attrs.rel="stylesheet",h(t,e.attrs),f(e,t),t}(t),r=function(e,t,n){var r=n.css,o=n.sourceMap,i=void 0===t.convertToAbsoluteUrls&&o;(t.convertToAbsoluteUrls||i)&&(r=c(r));o&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */");var a=new Blob([r],{type:"text/css"}),s=e.href;e.href=URL.createObjectURL(a),s&&URL.revokeObjectURL(s)}.bind(null,n,t),o=function(){p(n),n.href&&URL.revokeObjectURL(n.href)}):(n=m(t),r=function(e,t){var n=t.css,r=t.media;r&&e.setAttribute("media",r);if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}.bind(null,n),o=function(){p(n)});return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else o()}}e.exports=function(e,t){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(t=t||{}).attrs="object"==typeof t.attrs?t.attrs:{},t.singleton||"boolean"==typeof t.singleton||(t.singleton=o()),t.insertInto||(t.insertInto="head"),t.insertAt||(t.insertAt="bottom");var n=d(e,t);return u(n,t),function(e){for(var o=[],i=0;i<n.length;i++){var a=n[i];(s=r[a.id]).refs--,o.push(s)}e&&u(d(e,t),t);for(i=0;i<o.length;i++){var s;if(0===(s=o[i]).refs){for(var l=0;l<s.parts.length;l++)s.parts[l]();delete r[s.id]}}}};var g=function(){var e=[];return function(t,n){return e[t]=n,e.filter(Boolean).join("\n")}}();function b(e,t,n,r){var o=n?"":r.css;if(e.styleSheet)e.styleSheet.cssText=g(t,o);else{var i=document.createTextNode(o),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(i,a[t]):e.appendChild(i)}}},function(e,t){e.exports=function(e){var t="undefined"!=typeof window&&window.location;if(!t)throw new Error("fixUrls requires window.location");if(!e||"string"!=typeof e)return e;var n=t.protocol+"//"+t.host,r=n+t.pathname.replace(/\/[^\/]*$/,"/");return e.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(e,t){var o,i=t.trim().replace(/^"(.*)"$/,function(e,t){return t}).replace(/^'(.*)'$/,function(e,t){return t});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(i)?e:(o=0===i.indexOf("//")?i:0===i.indexOf("/")?n+i:r+i.replace(/^\.\//,""),"url("+JSON.stringify(o)+")")})}},function(e,t,n){"use strict";n.r(t);n(0);window.WowTrends={},window.WowTrends.Search=function(){var e=null,t=function(e){for(var t=JSON.parse(this.response),r=document.querySelector("#search-results");null!==r.firstChild;)r.firstChild.remove();if(null!==t){r.style.display="inherit";for(var o=0;o<t.length;o++){var i=document.createElement("li"),a=document.createElement("a"),s=document.createElement("div"),l=document.createElement("img"),c=document.createElement("p");i.classList.add("menu-item"),a.setAttribute("href","history.html?itemId="+t[o].id),s.classList.add("tile","tile-centered"),l.setAttribute("src","https://wow.zamimg.com/images/wow/icons/large/"+t[o].icon+".jpg"),l.classList.add("tile-icon"),c.classList.add("tile-content"),c.textContent=t[o].name,s.appendChild(l),s.appendChild(c),a.appendChild(s),i.appendChild(a),r.appendChild(i),i.appendChild(a)}n()}else n()},n=function(){document.querySelector(".form-icon").classList.remove("loading")},r=function(){e=null;var r=document.querySelector("#search-text").value;if(r.length<3)return document.querySelector("#search-results").style.display="none",void n();var o=new XMLHttpRequest;o.addEventListener("load",t),o.open("GET","names?search="+r),o.send()};return{init:function(){document.querySelector("#search-text").addEventListener("input",function(t){t.preventDefault(),e&&clearTimeout(e),document.querySelector(".form-icon").classList.add("loading"),e=setTimeout(r,1e3)})},getTimer:function(){return e}}}(),window.WowTrends.Chart=function(){var e=null,t=null,n=null,r=new URL(window.location.href).searchParams.get("itemId"),o=null,i=function(r){t=JSON.parse(this.response,d),n="https://wow.zamimg.com/images/wow/icons/large/"+t.icon+".jpg",o=Math.max(...t.periods.map(function(e){return e.volume})),a(),window.innerWidth<600&&e.axisX[0].set("viewportMinimum",t.periods[6].created_at);var i=document.createElement("img"),s=document.querySelector("#chart-main"),l=document.querySelector("#chart-container");i.setAttribute("src",n),i.classList.add("chart-icon"),s.insertBefore(i,l),f()},a=function(){(e=new CanvasJS.Chart("chart-container",{colorSet:"spectreColorSet",toolTip:WowTrends.Chart.toolTip,title:{fontColor:"#454d5d",horizontalAlign:"left",padding:{top:0,left:20,right:0,bottom:0},text:t.name,fontFamily:"Segoe UI, Roboto, Helvetica Neue, sans-serif",fontSize:30,fontWeight:"bold"},subtitles:WowTrends.Chart.subtitles.build(),zoomEnabled:!0,axisY:{includeZero:!1,title:"Price",prefix:"",labelFormatter:function(e){return u(e.value)}},axisY2:{title:"Volume",includeZero:!0,maximum:3*o},axisX:{scaleBreaks:{autoCalculate:!0,collapsibleThreshold:"10%"},interval:24,intervalType:"hour",valueFormatString:"DD MMM",labelAngle:-45},zoomEnabled:!0,data:[{type:"candlestick",dataPoints:s()},{name:"Volume",type:"line",axisYType:"secondary",dataPoints:c(),showInLegend:!0},{name:"7-Day Average",showInLegend:!0,type:"line",axisYType:"primary",dataPoints:l()}]})).render()},s=function(){return t.periods.map(function(e){return{x:e.created_at,y:[e.open,e.high,e.low,e.close],label:e.created_at}})},l=function(){return t.periods.map(function(e){return{x:e.created_at,y:e.average}})},c=function(){return t.periods.map(function(e){return{x:e.created_at,y:e.volume}})},u=function(e){return e>1e4?CanvasJS.formatNumber(Math.floor(e/1e4))+"G":e>100?Math.floor(e/100)+"S":e+"C"},d=function(e,t){var n;return"created_at"===e&&"string"==typeof t&&(n=/(\d+)-(\d+)-(\d+)T(\d+):(\d+):(\d+)/.exec(t))?new Date(n[1],n[2]-1,n[3],n[4],n[5],n[6]):t},f=function(){var e=Math.max(...t.periods.slice(0,14).map(function(e){return e.high})),n=Math.max(...t.periods.slice(0,14).map(function(e){return e.low}));document.getElementById("data-table-open").innerText=u(t.periods[0].open),document.getElementById("data-table-close").innerText=u(t.periods[0].close),document.getElementById("data-table-high").innerText=u(t.periods[0].high),document.getElementById("data-table-low").innerText=u(t.periods[0].low),document.getElementById("data-table-high-14").innerText=u(e),document.getElementById("data-table-low-14").innerText=u(n)};return{formatPriceLong:function(e){var t=CanvasJS.formatNumber(Math.floor(e/1e4));return e%=1e4,t+" gold, "+Math.floor(e/100)%100+" silver, "+(e%=100)+" copper"},getChart:function(){return e},getData:function(){return t},init:function(){if(null!==r){var e=new XMLHttpRequest;e.addEventListener("load",i),e.open("GET","details?itemId="+r),e.send()}}}}(),window.WowTrends.Chart.subtitles={build:function(){return[function(){var e=WowTrends.Chart.getData(),t=e.periods[0].ask-e.periods[0].open,n=t<0?"":"+",r=(t/e.periods[0].ask*100).toFixed(1);return{fontColor:"#454d5d",text:WowTrends.Chart.formatPriceLong(e.current)+" ("+n+t/1e4+"G / "+r+"%)",horizontalAlign:"left",fontFamily:"Segoe UI, Roboto, Helvetica Neue, sans-serif",fontSize:20,padding:{top:0,left:20,right:0,bottom:10}}}()]}},window.WowTrends.Chart.toolTip={shared:!0,contentFormatter:function(e){var t=e.entries[0].dataPoint,n="";return n+="<strong>"+t.label+"</strong>",n+="<br />",n+="<strong>Open:</strong> "+t.y[0]/1e4+"G<br />",n+="<strong>High:</strong> "+t.y[1]/1e4+"G<br />",n+="<strong>Low:</strong> "+t.y[2]/1e4+"G<br />",n+="<strong>Close:</strong> "+t.y[3]/1e4+"G<br />",n+="<strong>Volume:</strong> "+e.entries[1].dataPoint.y+"G<br />",n+="<strong>7-Day Avg:</strong> "+e.entries[2].dataPoint.y/1e4+"G"}},CanvasJS.addColorSet("spectreColorSet",["#5755d9","#32b643","#ffb700","#f1f1fc","#e85600","#454d5d","#727e96","#acb3c2","#e7e9ed","#f0f1f4","#f8f9fa","#fff"]),window.addEventListener("load",function(){window.WowTrends.Search.init(),window.WowTrends.Chart.init()})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vd2ViL3N0YXRpYy9zcmMvc3R5bGVzL21haW4uY3NzP2Q2ZGMiLCJ3ZWJwYWNrOi8vLy4vd2ViL3N0YXRpYy9zcmMvc3R5bGVzL21haW4uY3NzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2xpYi9jc3MtYmFzZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvdXJscy5qcyIsIndlYnBhY2s6Ly8vLi93ZWIvc3RhdGljL3NyYy9zY3JpcHRzL2luZGV4LmpzIiwid2VicGFjazovLy8uL3dlYi9zdGF0aWMvc3JjL3NjcmlwdHMvc2VhcmNoLmpzIiwid2VicGFjazovLy8uL3dlYi9zdGF0aWMvc3JjL3NjcmlwdHMvY2hhcnQuanMiLCJ3ZWJwYWNrOi8vLy4vd2ViL3N0YXRpYy9zcmMvc2NyaXB0cy9jaGFydC9zdWJ0aXRsZXMuanMiLCJ3ZWJwYWNrOi8vLy4vd2ViL3N0YXRpYy9zcmMvc2NyaXB0cy9jaGFydC90b29sX3RpcC5qcyJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsImNvbnRlbnQiLCJvcHRpb25zIiwiaG1yIiwidHJhbnNmb3JtIiwiaW5zZXJ0SW50byIsInVuZGVmaW5lZCIsImxvY2FscyIsInB1c2giLCJ1c2VTb3VyY2VNYXAiLCJsaXN0IiwidG9TdHJpbmciLCJ0aGlzIiwibWFwIiwiaXRlbSIsImNzc01hcHBpbmciLCJidG9hIiwic291cmNlTWFwcGluZyIsInNvdXJjZU1hcCIsInVuZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiSlNPTiIsInN0cmluZ2lmeSIsInRvQ29tbWVudCIsInNvdXJjZVVSTHMiLCJzb3VyY2VzIiwic291cmNlIiwic291cmNlUm9vdCIsImNvbmNhdCIsImpvaW4iLCJjc3NXaXRoTWFwcGluZ1RvU3RyaW5nIiwibWVkaWFRdWVyeSIsImFscmVhZHlJbXBvcnRlZE1vZHVsZXMiLCJsZW5ndGgiLCJpZCIsInN0eWxlc0luRG9tIiwiaXNPbGRJRSIsImZuIiwibWVtbyIsImFwcGx5IiwiYXJndW1lbnRzIiwibWVtb2l6ZSIsIndpbmRvdyIsImRvY3VtZW50IiwiYWxsIiwiYXRvYiIsImdldEVsZW1lbnQiLCJ0YXJnZXQiLCJwYXJlbnQiLCJzdHlsZVRhcmdldCIsInF1ZXJ5U2VsZWN0b3IiLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnREb2N1bWVudCIsImhlYWQiLCJlIiwic2luZ2xldG9uIiwic2luZ2xldG9uQ291bnRlciIsInN0eWxlc0luc2VydGVkQXRUb3AiLCJmaXhVcmxzIiwiYWRkU3R5bGVzVG9Eb20iLCJzdHlsZXMiLCJkb21TdHlsZSIsInJlZnMiLCJqIiwicGFydHMiLCJhZGRTdHlsZSIsImxpc3RUb1N0eWxlcyIsIm5ld1N0eWxlcyIsImJhc2UiLCJwYXJ0IiwiY3NzIiwibWVkaWEiLCJpbnNlcnRTdHlsZUVsZW1lbnQiLCJzdHlsZSIsIkVycm9yIiwibGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3AiLCJpbnNlcnRBdCIsIm5leHRTaWJsaW5nIiwiaW5zZXJ0QmVmb3JlIiwiYXBwZW5kQ2hpbGQiLCJmaXJzdENoaWxkIiwiYmVmb3JlIiwicmVtb3ZlU3R5bGVFbGVtZW50IiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwiaWR4IiwiaW5kZXhPZiIsInNwbGljZSIsImNyZWF0ZVN0eWxlRWxlbWVudCIsImNyZWF0ZUVsZW1lbnQiLCJhdHRycyIsInR5cGUiLCJub25jZSIsIm5jIiwiZ2V0Tm9uY2UiLCJhZGRBdHRycyIsImVsIiwia2V5cyIsImZvckVhY2giLCJzZXRBdHRyaWJ1dGUiLCJvYmoiLCJ1cGRhdGUiLCJyZW1vdmUiLCJyZXN1bHQiLCJzdHlsZUluZGV4IiwiYXBwbHlUb1NpbmdsZXRvblRhZyIsIlVSTCIsImNyZWF0ZU9iamVjdFVSTCIsInJldm9rZU9iamVjdFVSTCIsIkJsb2IiLCJsaW5rIiwicmVsIiwiY3JlYXRlTGlua0VsZW1lbnQiLCJhdXRvRml4VXJscyIsImNvbnZlcnRUb0Fic29sdXRlVXJscyIsImJsb2IiLCJvbGRTcmMiLCJocmVmIiwic3R5bGVTaGVldCIsImNzc1RleHQiLCJjcmVhdGVUZXh0Tm9kZSIsIm5ld09iaiIsIkRFQlVHIiwibmV3TGlzdCIsIm1heVJlbW92ZSIsInJlcGxhY2VUZXh0IiwidGV4dFN0b3JlIiwiaW5kZXgiLCJyZXBsYWNlbWVudCIsImZpbHRlciIsIkJvb2xlYW4iLCJjc3NOb2RlIiwiY2hpbGROb2RlcyIsImxvY2F0aW9uIiwiYmFzZVVybCIsInByb3RvY29sIiwiaG9zdCIsImN1cnJlbnREaXIiLCJwYXRobmFtZSIsInJlcGxhY2UiLCJmdWxsTWF0Y2giLCJvcmlnVXJsIiwibmV3VXJsIiwidW5xdW90ZWRPcmlnVXJsIiwidHJpbSIsIiQxIiwidGVzdCIsIldvd1RyZW5kcyIsIlNlYXJjaCIsInRpbWVyIiwiY2FsbGJhY2siLCJldmVudCIsImRhdGEiLCJwYXJzZSIsInJlc3BvbnNlIiwiZGlzcGxheSIsImVsZW1lbnQiLCJjb250ZW50V3JhcHBlciIsImNvbnRlbnRJbWFnZSIsImNvbnRlbnRUZXh0IiwiY2xhc3NMaXN0IiwiYWRkIiwiaWNvbiIsInRleHRDb250ZW50IiwiaGlkZVNwaW5uZXIiLCJzZW5kUXVlcnkiLCJxdWVyeSIsIm9SZXEiLCJYTUxIdHRwUmVxdWVzdCIsImFkZEV2ZW50TGlzdGVuZXIiLCJvcGVuIiwic2VuZCIsImluaXQiLCJwcmV2ZW50RGVmYXVsdCIsImNsZWFyVGltZW91dCIsInNldFRpbWVvdXQiLCJnZXRUaW1lciIsInNlYXJjaCIsIkNoYXJ0IiwiX2NoYXJ0IiwiX2RhdGEiLCJfaWNvblVybCIsIl9pdGVtSWQiLCJzZWFyY2hQYXJhbXMiLCJfbWF4Vm9sdW1lIiwiZXZ0IiwicGFyc2VEYXRlIiwiTWF0aCIsIm1heCIsInBlcmlvZHMiLCJ2b2x1bWUiLCJkcmF3IiwiaW5uZXJXaWR0aCIsImF4aXNYIiwic2V0IiwiY3JlYXRlZF9hdCIsInNpYmxpbmciLCJwb3B1bGF0ZVRhYmxlRGF0YSIsIkNhbnZhc0pTIiwiY29sb3JTZXQiLCJ0b29sVGlwIiwidGl0bGUiLCJmb250Q29sb3IiLCJob3Jpem9udGFsQWxpZ24iLCJwYWRkaW5nIiwidG9wIiwibGVmdCIsInJpZ2h0IiwiYm90dG9tIiwidGV4dCIsImZvbnRGYW1pbHkiLCJmb250U2l6ZSIsImZvbnRXZWlnaHQiLCJzdWJ0aXRsZXMiLCJidWlsZCIsInpvb21FbmFibGVkIiwiYXhpc1kiLCJpbmNsdWRlWmVybyIsInByZWZpeCIsImxhYmVsRm9ybWF0dGVyIiwiZm9ybWF0UHJpY2UiLCJheGlzWTIiLCJtYXhpbXVtIiwic2NhbGVCcmVha3MiLCJhdXRvQ2FsY3VsYXRlIiwiY29sbGFwc2libGVUaHJlc2hvbGQiLCJpbnRlcnZhbCIsImludGVydmFsVHlwZSIsInZhbHVlRm9ybWF0U3RyaW5nIiwibGFiZWxBbmdsZSIsImRhdGFQb2ludHMiLCJmb3JtYXREYXRhIiwiYXhpc1lUeXBlIiwiZm9ybWF0Vm9sdW1lRGF0YSIsInNob3dJbkxlZ2VuZCIsImZvcm1hdEF2ZXJhZ2VEYXRhIiwicmVuZGVyIiwieCIsInkiLCJoaWdoIiwibG93IiwiY2xvc2UiLCJsYWJlbCIsImF2ZXJhZ2UiLCJjb3BwZXIiLCJmb3JtYXROdW1iZXIiLCJmbG9vciIsImEiLCJleGVjIiwiRGF0ZSIsImhpZ2hGb3VydGVlbiIsInNsaWNlIiwibG93Rm91cnRlZW4iLCJnZXRFbGVtZW50QnlJZCIsImlubmVyVGV4dCIsImZvcm1hdFByaWNlTG9uZyIsImdvbGQiLCJnZXRDaGFydCIsImdldERhdGEiLCJjaGFydCIsImRpZmZlcmVuY2UiLCJhc2siLCJwbHVzT3JNaW51cyIsInBlcmNlbnRhZ2UiLCJ0b0ZpeGVkIiwiY3VycmVudCIsInByaWNlV2l0aENoYW5nZSIsInNoYXJlZCIsImNvbnRlbnRGb3JtYXR0ZXIiLCJwb2ludCIsImVudHJpZXMiLCJkYXRhUG9pbnQiLCJzdHIiLCJhZGRDb2xvclNldCJdLCJtYXBwaW5ncyI6ImFBQ0EsSUFBQUEsS0FHQSxTQUFBQyxFQUFBQyxHQUdBLEdBQUFGLEVBQUFFLEdBQ0EsT0FBQUYsRUFBQUUsR0FBQUMsUUFHQSxJQUFBQyxFQUFBSixFQUFBRSxJQUNBRyxFQUFBSCxFQUNBSSxHQUFBLEVBQ0FILFlBVUEsT0FOQUksRUFBQUwsR0FBQU0sS0FBQUosRUFBQUQsUUFBQUMsSUFBQUQsUUFBQUYsR0FHQUcsRUFBQUUsR0FBQSxFQUdBRixFQUFBRCxRQUtBRixFQUFBUSxFQUFBRixFQUdBTixFQUFBUyxFQUFBVixFQUdBQyxFQUFBVSxFQUFBLFNBQUFSLEVBQUFTLEVBQUFDLEdBQ0FaLEVBQUFhLEVBQUFYLEVBQUFTLElBQ0FHLE9BQUFDLGVBQUFiLEVBQUFTLEdBQTBDSyxZQUFBLEVBQUFDLElBQUFMLEtBSzFDWixFQUFBa0IsRUFBQSxTQUFBaEIsR0FDQSxvQkFBQWlCLGVBQUFDLGFBQ0FOLE9BQUFDLGVBQUFiLEVBQUFpQixPQUFBQyxhQUF3REMsTUFBQSxXQUV4RFAsT0FBQUMsZUFBQWIsRUFBQSxjQUFpRG1CLE9BQUEsS0FRakRyQixFQUFBc0IsRUFBQSxTQUFBRCxFQUFBRSxHQUVBLEdBREEsRUFBQUEsSUFBQUYsRUFBQXJCLEVBQUFxQixJQUNB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QSxHQUFBQyxVQUFBakMsRUFBQSxVSkpBeEMsU0FBQTJFLFlBQUEsbUJBRUEsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFNBR0F2TyxPQUFBK0gsaUJBQUEsa0JBQ0EvSCxPQUFBeUcsVUFBQUMsT0FBQXdCLE9BQ0FsSSxPQUFBeUcsVUFBQStCLE1BQUFOIiwiZmlsZSI6Im1haW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gNSk7XG4iLCJcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi9tYWluLmNzc1wiKTtcblxuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5cbnZhciB0cmFuc2Zvcm07XG52YXIgaW5zZXJ0SW50bztcblxuXG5cbnZhciBvcHRpb25zID0ge1wiaG1yXCI6dHJ1ZX1cblxub3B0aW9ucy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm1cbm9wdGlvbnMuaW5zZXJ0SW50byA9IHVuZGVmaW5lZDtcblxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscztcblxuaWYobW9kdWxlLmhvdCkge1xuXHRtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi9tYWluLmNzc1wiLCBmdW5jdGlvbigpIHtcblx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4vbWFpbi5jc3NcIik7XG5cblx0XHRpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcblxuXHRcdHZhciBsb2NhbHMgPSAoZnVuY3Rpb24oYSwgYikge1xuXHRcdFx0dmFyIGtleSwgaWR4ID0gMDtcblxuXHRcdFx0Zm9yKGtleSBpbiBhKSB7XG5cdFx0XHRcdGlmKCFiIHx8IGFba2V5XSAhPT0gYltrZXldKSByZXR1cm4gZmFsc2U7XG5cdFx0XHRcdGlkeCsrO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3Ioa2V5IGluIGIpIGlkeC0tO1xuXG5cdFx0XHRyZXR1cm4gaWR4ID09PSAwO1xuXHRcdH0oY29udGVudC5sb2NhbHMsIG5ld0NvbnRlbnQubG9jYWxzKSk7XG5cblx0XHRpZighbG9jYWxzKSB0aHJvdyBuZXcgRXJyb3IoJ0Fib3J0aW5nIENTUyBITVIgZHVlIHRvIGNoYW5nZWQgY3NzLW1vZHVsZXMgbG9jYWxzLicpO1xuXG5cdFx0dXBkYXRlKG5ld0NvbnRlbnQpO1xuXHR9KTtcblxuXHRtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn0iLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzXCIpKGZhbHNlKTtcbi8vIGltcG9ydHNcblxuXG4vLyBtb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcImhlYWRlciB7XFxyXFxuICBtYXJnaW4tYm90dG9tOiAxZW07XFxyXFxufVxcclxcblxcclxcbi5jaGFydC1pY29uIHtcXHJcXG4gIG1hcmdpbi1sZWZ0OiAyZW07XFxyXFxufVxcclxcblxcclxcbiNjaGFydC1jb250YWluZXIge1xcclxcbiAgaGVpZ2h0OiAzMDBweDtcXHJcXG4gIHdpZHRoOiAxMDAlO1xcclxcbn1cXHJcXG5cXHJcXG4jY2hhcnQtbWFpbiB7XFxyXFxuICBtYXJnaW46IDFlbSAwO1xcclxcbn1cXHJcXG5cXHJcXG4jc2VhcmNoLXJlc3VsdHMge1xcclxcbiAgICBkaXNwbGF5OiBub25lO1xcclxcbiAgICBtYXgtaGVpZ2h0OiAxNWVtO1xcclxcbiAgICBvdmVyZmxvdzogYXV0bztcXHJcXG4gICAgb3ZlcmZsb3cteDogaGlkZGVuO1xcclxcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxyXFxuICAgIHdpZHRoOiAxMDAlO1xcclxcbn1cXHJcXG5cXHJcXG4jc2VhcmNoLXJlc3VsdHMgaW1nIHtcXHJcXG4gIHdpZHRoOiAyZW07XFxyXFxufVxcclxcblxcclxcbiNzZWFyY2gtcmVzdWx0cyBwIHtcXHJcXG4gIG1hcmdpbjogMDtcXHJcXG59XFxyXFxuXFxyXFxuI3RpdGxlLWJsb2NrIHtcXHJcXG4gIG1hcmdpbjogMi41ZW0gYXV0byAzZW0gYXV0bztcXHJcXG4gIG1heC13aWR0aDogNDBlbTtcXHJcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXHJcXG59XFxyXFxuXFxyXFxuI3RpdGxlLWJsb2NrIGgxIHtcXHJcXG4gIG1hcmdpbi1ib3R0b206IDA7XFxyXFxufVxcclxcblxcclxcbiN0aXRsZS1ibG9jayBoMiB7XFxyXFxuICBtYXJnaW4tYm90dG9tOiAwLjVlbTtcXHJcXG59XFxyXFxuXCIsIFwiXCJdKTtcblxuLy8gZXhwb3J0c1xuIiwiLypcblx0TUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcblx0QXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cbi8vIGNzcyBiYXNlIGNvZGUsIGluamVjdGVkIGJ5IHRoZSBjc3MtbG9hZGVyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHVzZVNvdXJjZU1hcCkge1xuXHR2YXIgbGlzdCA9IFtdO1xuXG5cdC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcblx0bGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuXHRcdHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuXHRcdFx0dmFyIGNvbnRlbnQgPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0sIHVzZVNvdXJjZU1hcCk7XG5cdFx0XHRpZihpdGVtWzJdKSB7XG5cdFx0XHRcdHJldHVybiBcIkBtZWRpYSBcIiArIGl0ZW1bMl0gKyBcIntcIiArIGNvbnRlbnQgKyBcIn1cIjtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHJldHVybiBjb250ZW50O1xuXHRcdFx0fVxuXHRcdH0pLmpvaW4oXCJcIik7XG5cdH07XG5cblx0Ly8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3Rcblx0bGlzdC5pID0gZnVuY3Rpb24obW9kdWxlcywgbWVkaWFRdWVyeSkge1xuXHRcdGlmKHR5cGVvZiBtb2R1bGVzID09PSBcInN0cmluZ1wiKVxuXHRcdFx0bW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgXCJcIl1dO1xuXHRcdHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XG5cdFx0Zm9yKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBpZCA9IHRoaXNbaV1bMF07XG5cdFx0XHRpZih0eXBlb2YgaWQgPT09IFwibnVtYmVyXCIpXG5cdFx0XHRcdGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcblx0XHR9XG5cdFx0Zm9yKGkgPSAwOyBpIDwgbW9kdWxlcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGl0ZW0gPSBtb2R1bGVzW2ldO1xuXHRcdFx0Ly8gc2tpcCBhbHJlYWR5IGltcG9ydGVkIG1vZHVsZVxuXHRcdFx0Ly8gdGhpcyBpbXBsZW1lbnRhdGlvbiBpcyBub3QgMTAwJSBwZXJmZWN0IGZvciB3ZWlyZCBtZWRpYSBxdWVyeSBjb21iaW5hdGlvbnNcblx0XHRcdC8vICB3aGVuIGEgbW9kdWxlIGlzIGltcG9ydGVkIG11bHRpcGxlIHRpbWVzIHdpdGggZGlmZmVyZW50IG1lZGlhIHF1ZXJpZXMuXG5cdFx0XHQvLyAgSSBob3BlIHRoaXMgd2lsbCBuZXZlciBvY2N1ciAoSGV5IHRoaXMgd2F5IHdlIGhhdmUgc21hbGxlciBidW5kbGVzKVxuXHRcdFx0aWYodHlwZW9mIGl0ZW1bMF0gIT09IFwibnVtYmVyXCIgfHwgIWFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcblx0XHRcdFx0aWYobWVkaWFRdWVyeSAmJiAhaXRlbVsyXSkge1xuXHRcdFx0XHRcdGl0ZW1bMl0gPSBtZWRpYVF1ZXJ5O1xuXHRcdFx0XHR9IGVsc2UgaWYobWVkaWFRdWVyeSkge1xuXHRcdFx0XHRcdGl0ZW1bMl0gPSBcIihcIiArIGl0ZW1bMl0gKyBcIikgYW5kIChcIiArIG1lZGlhUXVlcnkgKyBcIilcIjtcblx0XHRcdFx0fVxuXHRcdFx0XHRsaXN0LnB1c2goaXRlbSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xuXHRyZXR1cm4gbGlzdDtcbn07XG5cbmZ1bmN0aW9uIGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSwgdXNlU291cmNlTWFwKSB7XG5cdHZhciBjb250ZW50ID0gaXRlbVsxXSB8fCAnJztcblx0dmFyIGNzc01hcHBpbmcgPSBpdGVtWzNdO1xuXHRpZiAoIWNzc01hcHBpbmcpIHtcblx0XHRyZXR1cm4gY29udGVudDtcblx0fVxuXG5cdGlmICh1c2VTb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgPT09ICdmdW5jdGlvbicpIHtcblx0XHR2YXIgc291cmNlTWFwcGluZyA9IHRvQ29tbWVudChjc3NNYXBwaW5nKTtcblx0XHR2YXIgc291cmNlVVJMcyA9IGNzc01hcHBpbmcuc291cmNlcy5tYXAoZnVuY3Rpb24gKHNvdXJjZSkge1xuXHRcdFx0cmV0dXJuICcvKiMgc291cmNlVVJMPScgKyBjc3NNYXBwaW5nLnNvdXJjZVJvb3QgKyBzb3VyY2UgKyAnICovJ1xuXHRcdH0pO1xuXG5cdFx0cmV0dXJuIFtjb250ZW50XS5jb25jYXQoc291cmNlVVJMcykuY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbignXFxuJyk7XG5cdH1cblxuXHRyZXR1cm4gW2NvbnRlbnRdLmpvaW4oJ1xcbicpO1xufVxuXG4vLyBBZGFwdGVkIGZyb20gY29udmVydC1zb3VyY2UtbWFwIChNSVQpXG5mdW5jdGlvbiB0b0NvbW1lbnQoc291cmNlTWFwKSB7XG5cdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuXHR2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKTtcblx0dmFyIGRhdGEgPSAnc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsJyArIGJhc2U2NDtcblxuXHRyZXR1cm4gJy8qIyAnICsgZGF0YSArICcgKi8nO1xufVxuIiwiLypcblx0TUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcblx0QXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cblxudmFyIHN0eWxlc0luRG9tID0ge307XG5cbnZhclx0bWVtb2l6ZSA9IGZ1bmN0aW9uIChmbikge1xuXHR2YXIgbWVtbztcblxuXHRyZXR1cm4gZnVuY3Rpb24gKCkge1xuXHRcdGlmICh0eXBlb2YgbWVtbyA9PT0gXCJ1bmRlZmluZWRcIikgbWVtbyA9IGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cdFx0cmV0dXJuIG1lbW87XG5cdH07XG59O1xuXG52YXIgaXNPbGRJRSA9IG1lbW9pemUoZnVuY3Rpb24gKCkge1xuXHQvLyBUZXN0IGZvciBJRSA8PSA5IGFzIHByb3Bvc2VkIGJ5IEJyb3dzZXJoYWNrc1xuXHQvLyBAc2VlIGh0dHA6Ly9icm93c2VyaGFja3MuY29tLyNoYWNrLWU3MWQ4NjkyZjY1MzM0MTczZmVlNzE1YzIyMmNiODA1XG5cdC8vIFRlc3RzIGZvciBleGlzdGVuY2Ugb2Ygc3RhbmRhcmQgZ2xvYmFscyBpcyB0byBhbGxvdyBzdHlsZS1sb2FkZXJcblx0Ly8gdG8gb3BlcmF0ZSBjb3JyZWN0bHkgaW50byBub24tc3RhbmRhcmQgZW52aXJvbm1lbnRzXG5cdC8vIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3dlYnBhY2stY29udHJpYi9zdHlsZS1sb2FkZXIvaXNzdWVzLzE3N1xuXHRyZXR1cm4gd2luZG93ICYmIGRvY3VtZW50ICYmIGRvY3VtZW50LmFsbCAmJiAhd2luZG93LmF0b2I7XG59KTtcblxudmFyIGdldFRhcmdldCA9IGZ1bmN0aW9uICh0YXJnZXQsIHBhcmVudCkge1xuICBpZiAocGFyZW50KXtcbiAgICByZXR1cm4gcGFyZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTtcbiAgfVxuICByZXR1cm4gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpO1xufTtcblxudmFyIGdldEVsZW1lbnQgPSAoZnVuY3Rpb24gKGZuKSB7XG5cdHZhciBtZW1vID0ge307XG5cblx0cmV0dXJuIGZ1bmN0aW9uKHRhcmdldCwgcGFyZW50KSB7XG4gICAgICAgICAgICAgICAgLy8gSWYgcGFzc2luZyBmdW5jdGlvbiBpbiBvcHRpb25zLCB0aGVuIHVzZSBpdCBmb3IgcmVzb2x2ZSBcImhlYWRcIiBlbGVtZW50LlxuICAgICAgICAgICAgICAgIC8vIFVzZWZ1bCBmb3IgU2hhZG93IFJvb3Qgc3R5bGUgaS5lXG4gICAgICAgICAgICAgICAgLy8ge1xuICAgICAgICAgICAgICAgIC8vICAgaW5zZXJ0SW50bzogZnVuY3Rpb24gKCkgeyByZXR1cm4gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNmb29cIikuc2hhZG93Um9vdCB9XG4gICAgICAgICAgICAgICAgLy8gfVxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdGFyZ2V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGFyZ2V0KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgbWVtb1t0YXJnZXRdID09PSBcInVuZGVmaW5lZFwiKSB7XG5cdFx0XHR2YXIgc3R5bGVUYXJnZXQgPSBnZXRUYXJnZXQuY2FsbCh0aGlzLCB0YXJnZXQsIHBhcmVudCk7XG5cdFx0XHQvLyBTcGVjaWFsIGNhc2UgdG8gcmV0dXJuIGhlYWQgb2YgaWZyYW1lIGluc3RlYWQgb2YgaWZyYW1lIGl0c2VsZlxuXHRcdFx0aWYgKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCAmJiBzdHlsZVRhcmdldCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCkge1xuXHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdC8vIFRoaXMgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gaWYgYWNjZXNzIHRvIGlmcmFtZSBpcyBibG9ja2VkXG5cdFx0XHRcdFx0Ly8gZHVlIHRvIGNyb3NzLW9yaWdpbiByZXN0cmljdGlvbnNcblx0XHRcdFx0XHRzdHlsZVRhcmdldCA9IHN0eWxlVGFyZ2V0LmNvbnRlbnREb2N1bWVudC5oZWFkO1xuXHRcdFx0XHR9IGNhdGNoKGUpIHtcblx0XHRcdFx0XHRzdHlsZVRhcmdldCA9IG51bGw7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdG1lbW9bdGFyZ2V0XSA9IHN0eWxlVGFyZ2V0O1xuXHRcdH1cblx0XHRyZXR1cm4gbWVtb1t0YXJnZXRdXG5cdH07XG59KSgpO1xuXG52YXIgc2luZ2xldG9uID0gbnVsbDtcbnZhclx0c2luZ2xldG9uQ291bnRlciA9IDA7XG52YXJcdHN0eWxlc0luc2VydGVkQXRUb3AgPSBbXTtcblxudmFyXHRmaXhVcmxzID0gcmVxdWlyZShcIi4vdXJsc1wiKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihsaXN0LCBvcHRpb25zKSB7XG5cdGlmICh0eXBlb2YgREVCVUcgIT09IFwidW5kZWZpbmVkXCIgJiYgREVCVUcpIHtcblx0XHRpZiAodHlwZW9mIGRvY3VtZW50ICE9PSBcIm9iamVjdFwiKSB0aHJvdyBuZXcgRXJyb3IoXCJUaGUgc3R5bGUtbG9hZGVyIGNhbm5vdCBiZSB1c2VkIGluIGEgbm9uLWJyb3dzZXIgZW52aXJvbm1lbnRcIik7XG5cdH1cblxuXHRvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuXHRvcHRpb25zLmF0dHJzID0gdHlwZW9mIG9wdGlvbnMuYXR0cnMgPT09IFwib2JqZWN0XCIgPyBvcHRpb25zLmF0dHJzIDoge307XG5cblx0Ly8gRm9yY2Ugc2luZ2xlLXRhZyBzb2x1dGlvbiBvbiBJRTYtOSwgd2hpY2ggaGFzIGEgaGFyZCBsaW1pdCBvbiB0aGUgIyBvZiA8c3R5bGU+XG5cdC8vIHRhZ3MgaXQgd2lsbCBhbGxvdyBvbiBhIHBhZ2Vcblx0aWYgKCFvcHRpb25zLnNpbmdsZXRvbiAmJiB0eXBlb2Ygb3B0aW9ucy5zaW5nbGV0b24gIT09IFwiYm9vbGVhblwiKSBvcHRpb25zLnNpbmdsZXRvbiA9IGlzT2xkSUUoKTtcblxuXHQvLyBCeSBkZWZhdWx0LCBhZGQgPHN0eWxlPiB0YWdzIHRvIHRoZSA8aGVhZD4gZWxlbWVudFxuICAgICAgICBpZiAoIW9wdGlvbnMuaW5zZXJ0SW50bykgb3B0aW9ucy5pbnNlcnRJbnRvID0gXCJoZWFkXCI7XG5cblx0Ly8gQnkgZGVmYXVsdCwgYWRkIDxzdHlsZT4gdGFncyB0byB0aGUgYm90dG9tIG9mIHRoZSB0YXJnZXRcblx0aWYgKCFvcHRpb25zLmluc2VydEF0KSBvcHRpb25zLmluc2VydEF0ID0gXCJib3R0b21cIjtcblxuXHR2YXIgc3R5bGVzID0gbGlzdFRvU3R5bGVzKGxpc3QsIG9wdGlvbnMpO1xuXG5cdGFkZFN0eWxlc1RvRG9tKHN0eWxlcywgb3B0aW9ucyk7XG5cblx0cmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZSAobmV3TGlzdCkge1xuXHRcdHZhciBtYXlSZW1vdmUgPSBbXTtcblxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgaXRlbSA9IHN0eWxlc1tpXTtcblx0XHRcdHZhciBkb21TdHlsZSA9IHN0eWxlc0luRG9tW2l0ZW0uaWRdO1xuXG5cdFx0XHRkb21TdHlsZS5yZWZzLS07XG5cdFx0XHRtYXlSZW1vdmUucHVzaChkb21TdHlsZSk7XG5cdFx0fVxuXG5cdFx0aWYobmV3TGlzdCkge1xuXHRcdFx0dmFyIG5ld1N0eWxlcyA9IGxpc3RUb1N0eWxlcyhuZXdMaXN0LCBvcHRpb25zKTtcblx0XHRcdGFkZFN0eWxlc1RvRG9tKG5ld1N0eWxlcywgb3B0aW9ucyk7XG5cdFx0fVxuXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBtYXlSZW1vdmUubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBkb21TdHlsZSA9IG1heVJlbW92ZVtpXTtcblxuXHRcdFx0aWYoZG9tU3R5bGUucmVmcyA9PT0gMCkge1xuXHRcdFx0XHRmb3IgKHZhciBqID0gMDsgaiA8IGRvbVN0eWxlLnBhcnRzLmxlbmd0aDsgaisrKSBkb21TdHlsZS5wYXJ0c1tqXSgpO1xuXG5cdFx0XHRcdGRlbGV0ZSBzdHlsZXNJbkRvbVtkb21TdHlsZS5pZF07XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xufTtcblxuZnVuY3Rpb24gYWRkU3R5bGVzVG9Eb20gKHN0eWxlcywgb3B0aW9ucykge1xuXHRmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlcy5sZW5ndGg7IGkrKykge1xuXHRcdHZhciBpdGVtID0gc3R5bGVzW2ldO1xuXHRcdHZhciBkb21TdHlsZSA9IHN0eWxlc0luRG9tW2l0ZW0uaWRdO1xuXG5cdFx0aWYoZG9tU3R5bGUpIHtcblx0XHRcdGRvbVN0eWxlLnJlZnMrKztcblxuXHRcdFx0Zm9yKHZhciBqID0gMDsgaiA8IGRvbVN0eWxlLnBhcnRzLmxlbmd0aDsgaisrKSB7XG5cdFx0XHRcdGRvbVN0eWxlLnBhcnRzW2pdKGl0ZW0ucGFydHNbal0pO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3IoOyBqIDwgaXRlbS5wYXJ0cy5sZW5ndGg7IGorKykge1xuXHRcdFx0XHRkb21TdHlsZS5wYXJ0cy5wdXNoKGFkZFN0eWxlKGl0ZW0ucGFydHNbal0sIG9wdGlvbnMpKTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0dmFyIHBhcnRzID0gW107XG5cblx0XHRcdGZvcih2YXIgaiA9IDA7IGogPCBpdGVtLnBhcnRzLmxlbmd0aDsgaisrKSB7XG5cdFx0XHRcdHBhcnRzLnB1c2goYWRkU3R5bGUoaXRlbS5wYXJ0c1tqXSwgb3B0aW9ucykpO1xuXHRcdFx0fVxuXG5cdFx0XHRzdHlsZXNJbkRvbVtpdGVtLmlkXSA9IHtpZDogaXRlbS5pZCwgcmVmczogMSwgcGFydHM6IHBhcnRzfTtcblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gbGlzdFRvU3R5bGVzIChsaXN0LCBvcHRpb25zKSB7XG5cdHZhciBzdHlsZXMgPSBbXTtcblx0dmFyIG5ld1N0eWxlcyA9IHt9O1xuXG5cdGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuXHRcdHZhciBpdGVtID0gbGlzdFtpXTtcblx0XHR2YXIgaWQgPSBvcHRpb25zLmJhc2UgPyBpdGVtWzBdICsgb3B0aW9ucy5iYXNlIDogaXRlbVswXTtcblx0XHR2YXIgY3NzID0gaXRlbVsxXTtcblx0XHR2YXIgbWVkaWEgPSBpdGVtWzJdO1xuXHRcdHZhciBzb3VyY2VNYXAgPSBpdGVtWzNdO1xuXHRcdHZhciBwYXJ0ID0ge2NzczogY3NzLCBtZWRpYTogbWVkaWEsIHNvdXJjZU1hcDogc291cmNlTWFwfTtcblxuXHRcdGlmKCFuZXdTdHlsZXNbaWRdKSBzdHlsZXMucHVzaChuZXdTdHlsZXNbaWRdID0ge2lkOiBpZCwgcGFydHM6IFtwYXJ0XX0pO1xuXHRcdGVsc2UgbmV3U3R5bGVzW2lkXS5wYXJ0cy5wdXNoKHBhcnQpO1xuXHR9XG5cblx0cmV0dXJuIHN0eWxlcztcbn1cblxuZnVuY3Rpb24gaW5zZXJ0U3R5bGVFbGVtZW50IChvcHRpb25zLCBzdHlsZSkge1xuXHR2YXIgdGFyZ2V0ID0gZ2V0RWxlbWVudChvcHRpb25zLmluc2VydEludG8pXG5cblx0aWYgKCF0YXJnZXQpIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydEludG8nIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcblx0fVxuXG5cdHZhciBsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcCA9IHN0eWxlc0luc2VydGVkQXRUb3Bbc3R5bGVzSW5zZXJ0ZWRBdFRvcC5sZW5ndGggLSAxXTtcblxuXHRpZiAob3B0aW9ucy5pbnNlcnRBdCA9PT0gXCJ0b3BcIikge1xuXHRcdGlmICghbGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3ApIHtcblx0XHRcdHRhcmdldC5pbnNlcnRCZWZvcmUoc3R5bGUsIHRhcmdldC5maXJzdENoaWxkKTtcblx0XHR9IGVsc2UgaWYgKGxhc3RTdHlsZUVsZW1lbnRJbnNlcnRlZEF0VG9wLm5leHRTaWJsaW5nKSB7XG5cdFx0XHR0YXJnZXQuaW5zZXJ0QmVmb3JlKHN0eWxlLCBsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcC5uZXh0U2libGluZyk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG5cdFx0fVxuXHRcdHN0eWxlc0luc2VydGVkQXRUb3AucHVzaChzdHlsZSk7XG5cdH0gZWxzZSBpZiAob3B0aW9ucy5pbnNlcnRBdCA9PT0gXCJib3R0b21cIikge1xuXHRcdHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG5cdH0gZWxzZSBpZiAodHlwZW9mIG9wdGlvbnMuaW5zZXJ0QXQgPT09IFwib2JqZWN0XCIgJiYgb3B0aW9ucy5pbnNlcnRBdC5iZWZvcmUpIHtcblx0XHR2YXIgbmV4dFNpYmxpbmcgPSBnZXRFbGVtZW50KG9wdGlvbnMuaW5zZXJ0QXQuYmVmb3JlLCB0YXJnZXQpO1xuXHRcdHRhcmdldC5pbnNlcnRCZWZvcmUoc3R5bGUsIG5leHRTaWJsaW5nKTtcblx0fSBlbHNlIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoXCJbU3R5bGUgTG9hZGVyXVxcblxcbiBJbnZhbGlkIHZhbHVlIGZvciBwYXJhbWV0ZXIgJ2luc2VydEF0JyAoJ29wdGlvbnMuaW5zZXJ0QXQnKSBmb3VuZC5cXG4gTXVzdCBiZSAndG9wJywgJ2JvdHRvbScsIG9yIE9iamVjdC5cXG4gKGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJwYWNrLWNvbnRyaWIvc3R5bGUtbG9hZGVyI2luc2VydGF0KVxcblwiKTtcblx0fVxufVxuXG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQgKHN0eWxlKSB7XG5cdGlmIChzdHlsZS5wYXJlbnROb2RlID09PSBudWxsKSByZXR1cm4gZmFsc2U7XG5cdHN0eWxlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGUpO1xuXG5cdHZhciBpZHggPSBzdHlsZXNJbnNlcnRlZEF0VG9wLmluZGV4T2Yoc3R5bGUpO1xuXHRpZihpZHggPj0gMCkge1xuXHRcdHN0eWxlc0luc2VydGVkQXRUb3Auc3BsaWNlKGlkeCwgMSk7XG5cdH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlU3R5bGVFbGVtZW50IChvcHRpb25zKSB7XG5cdHZhciBzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcblxuXHRpZihvcHRpb25zLmF0dHJzLnR5cGUgPT09IHVuZGVmaW5lZCkge1xuXHRcdG9wdGlvbnMuYXR0cnMudHlwZSA9IFwidGV4dC9jc3NcIjtcblx0fVxuXG5cdGlmKG9wdGlvbnMuYXR0cnMubm9uY2UgPT09IHVuZGVmaW5lZCkge1xuXHRcdHZhciBub25jZSA9IGdldE5vbmNlKCk7XG5cdFx0aWYgKG5vbmNlKSB7XG5cdFx0XHRvcHRpb25zLmF0dHJzLm5vbmNlID0gbm9uY2U7XG5cdFx0fVxuXHR9XG5cblx0YWRkQXR0cnMoc3R5bGUsIG9wdGlvbnMuYXR0cnMpO1xuXHRpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucywgc3R5bGUpO1xuXG5cdHJldHVybiBzdHlsZTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlTGlua0VsZW1lbnQgKG9wdGlvbnMpIHtcblx0dmFyIGxpbmsgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGlua1wiKTtcblxuXHRpZihvcHRpb25zLmF0dHJzLnR5cGUgPT09IHVuZGVmaW5lZCkge1xuXHRcdG9wdGlvbnMuYXR0cnMudHlwZSA9IFwidGV4dC9jc3NcIjtcblx0fVxuXHRvcHRpb25zLmF0dHJzLnJlbCA9IFwic3R5bGVzaGVldFwiO1xuXG5cdGFkZEF0dHJzKGxpbmssIG9wdGlvbnMuYXR0cnMpO1xuXHRpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucywgbGluayk7XG5cblx0cmV0dXJuIGxpbms7XG59XG5cbmZ1bmN0aW9uIGFkZEF0dHJzIChlbCwgYXR0cnMpIHtcblx0T2JqZWN0LmtleXMoYXR0cnMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuXHRcdGVsLnNldEF0dHJpYnV0ZShrZXksIGF0dHJzW2tleV0pO1xuXHR9KTtcbn1cblxuZnVuY3Rpb24gZ2V0Tm9uY2UoKSB7XG5cdGlmICh0eXBlb2YgX193ZWJwYWNrX25vbmNlX18gPT09ICd1bmRlZmluZWQnKSB7XG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cblxuXHRyZXR1cm4gX193ZWJwYWNrX25vbmNlX187XG59XG5cbmZ1bmN0aW9uIGFkZFN0eWxlIChvYmosIG9wdGlvbnMpIHtcblx0dmFyIHN0eWxlLCB1cGRhdGUsIHJlbW92ZSwgcmVzdWx0O1xuXG5cdC8vIElmIGEgdHJhbnNmb3JtIGZ1bmN0aW9uIHdhcyBkZWZpbmVkLCBydW4gaXQgb24gdGhlIGNzc1xuXHRpZiAob3B0aW9ucy50cmFuc2Zvcm0gJiYgb2JqLmNzcykge1xuXHQgICAgcmVzdWx0ID0gb3B0aW9ucy50cmFuc2Zvcm0ob2JqLmNzcyk7XG5cblx0ICAgIGlmIChyZXN1bHQpIHtcblx0ICAgIFx0Ly8gSWYgdHJhbnNmb3JtIHJldHVybnMgYSB2YWx1ZSwgdXNlIHRoYXQgaW5zdGVhZCBvZiB0aGUgb3JpZ2luYWwgY3NzLlxuXHQgICAgXHQvLyBUaGlzIGFsbG93cyBydW5uaW5nIHJ1bnRpbWUgdHJhbnNmb3JtYXRpb25zIG9uIHRoZSBjc3MuXG5cdCAgICBcdG9iai5jc3MgPSByZXN1bHQ7XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgXHQvLyBJZiB0aGUgdHJhbnNmb3JtIGZ1bmN0aW9uIHJldHVybnMgYSBmYWxzeSB2YWx1ZSwgZG9uJ3QgYWRkIHRoaXMgY3NzLlxuXHQgICAgXHQvLyBUaGlzIGFsbG93cyBjb25kaXRpb25hbCBsb2FkaW5nIG9mIGNzc1xuXHQgICAgXHRyZXR1cm4gZnVuY3Rpb24oKSB7XG5cdCAgICBcdFx0Ly8gbm9vcFxuXHQgICAgXHR9O1xuXHQgICAgfVxuXHR9XG5cblx0aWYgKG9wdGlvbnMuc2luZ2xldG9uKSB7XG5cdFx0dmFyIHN0eWxlSW5kZXggPSBzaW5nbGV0b25Db3VudGVyKys7XG5cblx0XHRzdHlsZSA9IHNpbmdsZXRvbiB8fCAoc2luZ2xldG9uID0gY3JlYXRlU3R5bGVFbGVtZW50KG9wdGlvbnMpKTtcblxuXHRcdHVwZGF0ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgZmFsc2UpO1xuXHRcdHJlbW92ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgdHJ1ZSk7XG5cblx0fSBlbHNlIGlmIChcblx0XHRvYmouc291cmNlTWFwICYmXG5cdFx0dHlwZW9mIFVSTCA9PT0gXCJmdW5jdGlvblwiICYmXG5cdFx0dHlwZW9mIFVSTC5jcmVhdGVPYmplY3RVUkwgPT09IFwiZnVuY3Rpb25cIiAmJlxuXHRcdHR5cGVvZiBVUkwucmV2b2tlT2JqZWN0VVJMID09PSBcImZ1bmN0aW9uXCIgJiZcblx0XHR0eXBlb2YgQmxvYiA9PT0gXCJmdW5jdGlvblwiICYmXG5cdFx0dHlwZW9mIGJ0b2EgPT09IFwiZnVuY3Rpb25cIlxuXHQpIHtcblx0XHRzdHlsZSA9IGNyZWF0ZUxpbmtFbGVtZW50KG9wdGlvbnMpO1xuXHRcdHVwZGF0ZSA9IHVwZGF0ZUxpbmsuYmluZChudWxsLCBzdHlsZSwgb3B0aW9ucyk7XG5cdFx0cmVtb3ZlID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0cmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKTtcblxuXHRcdFx0aWYoc3R5bGUuaHJlZikgVVJMLnJldm9rZU9iamVjdFVSTChzdHlsZS5ocmVmKTtcblx0XHR9O1xuXHR9IGVsc2Uge1xuXHRcdHN0eWxlID0gY3JlYXRlU3R5bGVFbGVtZW50KG9wdGlvbnMpO1xuXHRcdHVwZGF0ZSA9IGFwcGx5VG9UYWcuYmluZChudWxsLCBzdHlsZSk7XG5cdFx0cmVtb3ZlID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0cmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKTtcblx0XHR9O1xuXHR9XG5cblx0dXBkYXRlKG9iaik7XG5cblx0cmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZVN0eWxlIChuZXdPYmopIHtcblx0XHRpZiAobmV3T2JqKSB7XG5cdFx0XHRpZiAoXG5cdFx0XHRcdG5ld09iai5jc3MgPT09IG9iai5jc3MgJiZcblx0XHRcdFx0bmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiZcblx0XHRcdFx0bmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcFxuXHRcdFx0KSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0dXBkYXRlKG9iaiA9IG5ld09iaik7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJlbW92ZSgpO1xuXHRcdH1cblx0fTtcbn1cblxudmFyIHJlcGxhY2VUZXh0ID0gKGZ1bmN0aW9uICgpIHtcblx0dmFyIHRleHRTdG9yZSA9IFtdO1xuXG5cdHJldHVybiBmdW5jdGlvbiAoaW5kZXgsIHJlcGxhY2VtZW50KSB7XG5cdFx0dGV4dFN0b3JlW2luZGV4XSA9IHJlcGxhY2VtZW50O1xuXG5cdFx0cmV0dXJuIHRleHRTdG9yZS5maWx0ZXIoQm9vbGVhbikuam9pbignXFxuJyk7XG5cdH07XG59KSgpO1xuXG5mdW5jdGlvbiBhcHBseVRvU2luZ2xldG9uVGFnIChzdHlsZSwgaW5kZXgsIHJlbW92ZSwgb2JqKSB7XG5cdHZhciBjc3MgPSByZW1vdmUgPyBcIlwiIDogb2JqLmNzcztcblxuXHRpZiAoc3R5bGUuc3R5bGVTaGVldCkge1xuXHRcdHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IHJlcGxhY2VUZXh0KGluZGV4LCBjc3MpO1xuXHR9IGVsc2Uge1xuXHRcdHZhciBjc3NOb2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKTtcblx0XHR2YXIgY2hpbGROb2RlcyA9IHN0eWxlLmNoaWxkTm9kZXM7XG5cblx0XHRpZiAoY2hpbGROb2Rlc1tpbmRleF0pIHN0eWxlLnJlbW92ZUNoaWxkKGNoaWxkTm9kZXNbaW5kZXhdKTtcblxuXHRcdGlmIChjaGlsZE5vZGVzLmxlbmd0aCkge1xuXHRcdFx0c3R5bGUuaW5zZXJ0QmVmb3JlKGNzc05vZGUsIGNoaWxkTm9kZXNbaW5kZXhdKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0c3R5bGUuYXBwZW5kQ2hpbGQoY3NzTm9kZSk7XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIGFwcGx5VG9UYWcgKHN0eWxlLCBvYmopIHtcblx0dmFyIGNzcyA9IG9iai5jc3M7XG5cdHZhciBtZWRpYSA9IG9iai5tZWRpYTtcblxuXHRpZihtZWRpYSkge1xuXHRcdHN0eWxlLnNldEF0dHJpYnV0ZShcIm1lZGlhXCIsIG1lZGlhKVxuXHR9XG5cblx0aWYoc3R5bGUuc3R5bGVTaGVldCkge1xuXHRcdHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcblx0fSBlbHNlIHtcblx0XHR3aGlsZShzdHlsZS5maXJzdENoaWxkKSB7XG5cdFx0XHRzdHlsZS5yZW1vdmVDaGlsZChzdHlsZS5maXJzdENoaWxkKTtcblx0XHR9XG5cblx0XHRzdHlsZS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcblx0fVxufVxuXG5mdW5jdGlvbiB1cGRhdGVMaW5rIChsaW5rLCBvcHRpb25zLCBvYmopIHtcblx0dmFyIGNzcyA9IG9iai5jc3M7XG5cdHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuXG5cdC8qXG5cdFx0SWYgY29udmVydFRvQWJzb2x1dGVVcmxzIGlzbid0IGRlZmluZWQsIGJ1dCBzb3VyY2VtYXBzIGFyZSBlbmFibGVkXG5cdFx0YW5kIHRoZXJlIGlzIG5vIHB1YmxpY1BhdGggZGVmaW5lZCB0aGVuIGxldHMgdHVybiBjb252ZXJ0VG9BYnNvbHV0ZVVybHNcblx0XHRvbiBieSBkZWZhdWx0LiAgT3RoZXJ3aXNlIGRlZmF1bHQgdG8gdGhlIGNvbnZlcnRUb0Fic29sdXRlVXJscyBvcHRpb25cblx0XHRkaXJlY3RseVxuXHQqL1xuXHR2YXIgYXV0b0ZpeFVybHMgPSBvcHRpb25zLmNvbnZlcnRUb0Fic29sdXRlVXJscyA9PT0gdW5kZWZpbmVkICYmIHNvdXJjZU1hcDtcblxuXHRpZiAob3B0aW9ucy5jb252ZXJ0VG9BYnNvbHV0ZVVybHMgfHwgYXV0b0ZpeFVybHMpIHtcblx0XHRjc3MgPSBmaXhVcmxzKGNzcyk7XG5cdH1cblxuXHRpZiAoc291cmNlTWFwKSB7XG5cdFx0Ly8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMjY2MDM4NzVcblx0XHRjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiICsgYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSArIFwiICovXCI7XG5cdH1cblxuXHR2YXIgYmxvYiA9IG5ldyBCbG9iKFtjc3NdLCB7IHR5cGU6IFwidGV4dC9jc3NcIiB9KTtcblxuXHR2YXIgb2xkU3JjID0gbGluay5ocmVmO1xuXG5cdGxpbmsuaHJlZiA9IFVSTC5jcmVhdGVPYmplY3RVUkwoYmxvYik7XG5cblx0aWYob2xkU3JjKSBVUkwucmV2b2tlT2JqZWN0VVJMKG9sZFNyYyk7XG59XG4iLCJcbi8qKlxuICogV2hlbiBzb3VyY2UgbWFwcyBhcmUgZW5hYmxlZCwgYHN0eWxlLWxvYWRlcmAgdXNlcyBhIGxpbmsgZWxlbWVudCB3aXRoIGEgZGF0YS11cmkgdG9cbiAqIGVtYmVkIHRoZSBjc3Mgb24gdGhlIHBhZ2UuIFRoaXMgYnJlYWtzIGFsbCByZWxhdGl2ZSB1cmxzIGJlY2F1c2Ugbm93IHRoZXkgYXJlIHJlbGF0aXZlIHRvIGFcbiAqIGJ1bmRsZSBpbnN0ZWFkIG9mIHRoZSBjdXJyZW50IHBhZ2UuXG4gKlxuICogT25lIHNvbHV0aW9uIGlzIHRvIG9ubHkgdXNlIGZ1bGwgdXJscywgYnV0IHRoYXQgbWF5IGJlIGltcG9zc2libGUuXG4gKlxuICogSW5zdGVhZCwgdGhpcyBmdW5jdGlvbiBcImZpeGVzXCIgdGhlIHJlbGF0aXZlIHVybHMgdG8gYmUgYWJzb2x1dGUgYWNjb3JkaW5nIHRvIHRoZSBjdXJyZW50IHBhZ2UgbG9jYXRpb24uXG4gKlxuICogQSBydWRpbWVudGFyeSB0ZXN0IHN1aXRlIGlzIGxvY2F0ZWQgYXQgYHRlc3QvZml4VXJscy5qc2AgYW5kIGNhbiBiZSBydW4gdmlhIHRoZSBgbnBtIHRlc3RgIGNvbW1hbmQuXG4gKlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNzcykge1xuICAvLyBnZXQgY3VycmVudCBsb2NhdGlvblxuICB2YXIgbG9jYXRpb24gPSB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiICYmIHdpbmRvdy5sb2NhdGlvbjtcblxuICBpZiAoIWxvY2F0aW9uKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiZml4VXJscyByZXF1aXJlcyB3aW5kb3cubG9jYXRpb25cIik7XG4gIH1cblxuXHQvLyBibGFuayBvciBudWxsP1xuXHRpZiAoIWNzcyB8fCB0eXBlb2YgY3NzICE9PSBcInN0cmluZ1wiKSB7XG5cdCAgcmV0dXJuIGNzcztcbiAgfVxuXG4gIHZhciBiYXNlVXJsID0gbG9jYXRpb24ucHJvdG9jb2wgKyBcIi8vXCIgKyBsb2NhdGlvbi5ob3N0O1xuICB2YXIgY3VycmVudERpciA9IGJhc2VVcmwgKyBsb2NhdGlvbi5wYXRobmFtZS5yZXBsYWNlKC9cXC9bXlxcL10qJC8sIFwiL1wiKTtcblxuXHQvLyBjb252ZXJ0IGVhY2ggdXJsKC4uLilcblx0Lypcblx0VGhpcyByZWd1bGFyIGV4cHJlc3Npb24gaXMganVzdCBhIHdheSB0byByZWN1cnNpdmVseSBtYXRjaCBicmFja2V0cyB3aXRoaW5cblx0YSBzdHJpbmcuXG5cblx0IC91cmxcXHMqXFwoICA9IE1hdGNoIG9uIHRoZSB3b3JkIFwidXJsXCIgd2l0aCBhbnkgd2hpdGVzcGFjZSBhZnRlciBpdCBhbmQgdGhlbiBhIHBhcmVuc1xuXHQgICAoICA9IFN0YXJ0IGEgY2FwdHVyaW5nIGdyb3VwXG5cdCAgICAgKD86ICA9IFN0YXJ0IGEgbm9uLWNhcHR1cmluZyBncm91cFxuXHQgICAgICAgICBbXikoXSAgPSBNYXRjaCBhbnl0aGluZyB0aGF0IGlzbid0IGEgcGFyZW50aGVzZXNcblx0ICAgICAgICAgfCAgPSBPUlxuXHQgICAgICAgICBcXCggID0gTWF0Y2ggYSBzdGFydCBwYXJlbnRoZXNlc1xuXHQgICAgICAgICAgICAgKD86ICA9IFN0YXJ0IGFub3RoZXIgbm9uLWNhcHR1cmluZyBncm91cHNcblx0ICAgICAgICAgICAgICAgICBbXikoXSsgID0gTWF0Y2ggYW55dGhpbmcgdGhhdCBpc24ndCBhIHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICAgICAgfCAgPSBPUlxuXHQgICAgICAgICAgICAgICAgIFxcKCAgPSBNYXRjaCBhIHN0YXJ0IHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICAgICAgICAgIFteKShdKiAgPSBNYXRjaCBhbnl0aGluZyB0aGF0IGlzbid0IGEgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICAgICBcXCkgID0gTWF0Y2ggYSBlbmQgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICkgID0gRW5kIEdyb3VwXG4gICAgICAgICAgICAgICpcXCkgPSBNYXRjaCBhbnl0aGluZyBhbmQgdGhlbiBhIGNsb3NlIHBhcmVuc1xuICAgICAgICAgICkgID0gQ2xvc2Ugbm9uLWNhcHR1cmluZyBncm91cFxuICAgICAgICAgICogID0gTWF0Y2ggYW55dGhpbmdcbiAgICAgICApICA9IENsb3NlIGNhcHR1cmluZyBncm91cFxuXHQgXFwpICA9IE1hdGNoIGEgY2xvc2UgcGFyZW5zXG5cblx0IC9naSAgPSBHZXQgYWxsIG1hdGNoZXMsIG5vdCB0aGUgZmlyc3QuICBCZSBjYXNlIGluc2Vuc2l0aXZlLlxuXHQgKi9cblx0dmFyIGZpeGVkQ3NzID0gY3NzLnJlcGxhY2UoL3VybFxccypcXCgoKD86W14pKF18XFwoKD86W14pKF0rfFxcKFteKShdKlxcKSkqXFwpKSopXFwpL2dpLCBmdW5jdGlvbihmdWxsTWF0Y2gsIG9yaWdVcmwpIHtcblx0XHQvLyBzdHJpcCBxdW90ZXMgKGlmIHRoZXkgZXhpc3QpXG5cdFx0dmFyIHVucXVvdGVkT3JpZ1VybCA9IG9yaWdVcmxcblx0XHRcdC50cmltKClcblx0XHRcdC5yZXBsYWNlKC9eXCIoLiopXCIkLywgZnVuY3Rpb24obywgJDEpeyByZXR1cm4gJDE7IH0pXG5cdFx0XHQucmVwbGFjZSgvXicoLiopJyQvLCBmdW5jdGlvbihvLCAkMSl7IHJldHVybiAkMTsgfSk7XG5cblx0XHQvLyBhbHJlYWR5IGEgZnVsbCB1cmw/IG5vIGNoYW5nZVxuXHRcdGlmICgvXigjfGRhdGE6fGh0dHA6XFwvXFwvfGh0dHBzOlxcL1xcL3xmaWxlOlxcL1xcL1xcL3xcXHMqJCkvaS50ZXN0KHVucXVvdGVkT3JpZ1VybCkpIHtcblx0XHQgIHJldHVybiBmdWxsTWF0Y2g7XG5cdFx0fVxuXG5cdFx0Ly8gY29udmVydCB0aGUgdXJsIHRvIGEgZnVsbCB1cmxcblx0XHR2YXIgbmV3VXJsO1xuXG5cdFx0aWYgKHVucXVvdGVkT3JpZ1VybC5pbmRleE9mKFwiLy9cIikgPT09IDApIHtcblx0XHQgIFx0Ly9UT0RPOiBzaG91bGQgd2UgYWRkIHByb3RvY29sP1xuXHRcdFx0bmV3VXJsID0gdW5xdW90ZWRPcmlnVXJsO1xuXHRcdH0gZWxzZSBpZiAodW5xdW90ZWRPcmlnVXJsLmluZGV4T2YoXCIvXCIpID09PSAwKSB7XG5cdFx0XHQvLyBwYXRoIHNob3VsZCBiZSByZWxhdGl2ZSB0byB0aGUgYmFzZSB1cmxcblx0XHRcdG5ld1VybCA9IGJhc2VVcmwgKyB1bnF1b3RlZE9yaWdVcmw7IC8vIGFscmVhZHkgc3RhcnRzIHdpdGggJy8nXG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIHBhdGggc2hvdWxkIGJlIHJlbGF0aXZlIHRvIGN1cnJlbnQgZGlyZWN0b3J5XG5cdFx0XHRuZXdVcmwgPSBjdXJyZW50RGlyICsgdW5xdW90ZWRPcmlnVXJsLnJlcGxhY2UoL15cXC5cXC8vLCBcIlwiKTsgLy8gU3RyaXAgbGVhZGluZyAnLi8nXG5cdFx0fVxuXG5cdFx0Ly8gc2VuZCBiYWNrIHRoZSBmaXhlZCB1cmwoLi4uKVxuXHRcdHJldHVybiBcInVybChcIiArIEpTT04uc3RyaW5naWZ5KG5ld1VybCkgKyBcIilcIjtcblx0fSk7XG5cblx0Ly8gc2VuZCBiYWNrIHRoZSBmaXhlZCBjc3Ncblx0cmV0dXJuIGZpeGVkQ3NzO1xufTtcbiIsImltcG9ydCBcIi4uL3N0eWxlcy9tYWluLmNzc1wiXHJcblxyXG5pbXBvcnQgU2VhcmNoIGZyb20gJy4vc2VhcmNoLmpzJ1xyXG5pbXBvcnQgQ2hhcnQgZnJvbSAnLi9jaGFydC5qcydcclxuaW1wb3J0IENoYXJ0U3VidGl0bGVzIGZyb20gJy4vY2hhcnQvc3VidGl0bGVzLmpzJ1xyXG5pbXBvcnQgQ2hhcnRUb29sdGlwcyBmcm9tICcuL2NoYXJ0L3Rvb2xfdGlwLmpzJ1xyXG5cclxud2luZG93Lldvd1RyZW5kcyA9IHt9O1xyXG53aW5kb3cuV293VHJlbmRzLlNlYXJjaCA9IFNlYXJjaCgpO1xyXG53aW5kb3cuV293VHJlbmRzLkNoYXJ0ID0gQ2hhcnQoKTtcclxud2luZG93Lldvd1RyZW5kcy5DaGFydC5zdWJ0aXRsZXMgPSBDaGFydFN1YnRpdGxlcygpO1xyXG53aW5kb3cuV293VHJlbmRzLkNoYXJ0LnRvb2xUaXAgPSBDaGFydFRvb2x0aXBzKCk7XHJcblxyXG5DYW52YXNKUy5hZGRDb2xvclNldChcInNwZWN0cmVDb2xvclNldFwiLCBcclxuICAgICAgICAgICAgICAgICAgICAgW1xyXG4gICAgICAgICAgICAgICAgICAgICAgIFwiIzU3NTVkOVwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgIFwiIzMyYjY0M1wiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgIFwiI2ZmYjcwMFwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgIFwiI2YxZjFmY1wiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgIFwiI2U4NTYwMFwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgIFwiIzQ1NGQ1ZFwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgIFwiIzcyN2U5NlwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgIFwiI2FjYjNjMlwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgIFwiI2U3ZTllZFwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgIFwiI2YwZjFmNFwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgIFwiI2Y4ZjlmYVwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgIFwiI2ZmZlwiXHJcbiAgICAgICAgICAgICAgICAgICAgIF0pO1xyXG5cclxud2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsIGZ1bmN0aW9uKCkge1xyXG4gIHdpbmRvdy5Xb3dUcmVuZHMuU2VhcmNoLmluaXQoKTtcclxuICB3aW5kb3cuV293VHJlbmRzLkNoYXJ0LmluaXQoKTtcclxufSk7XHJcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xyXG4gICAgdmFyIEJBU0VfSUNPTl9VUkwgPSBcImh0dHBzOi8vd293LnphbWltZy5jb20vaW1hZ2VzL3dvdy9pY29ucy9sYXJnZS9cIjtcclxuICAgIHZhciB0aW1lciA9IG51bGw7XHJcblxyXG4gICAgdmFyIGNhbGxiYWNrID0gZnVuY3Rpb24oZXZlbnQpIHtcclxuICAgICAgICB2YXIgZGF0YSA9IEpTT04ucGFyc2UodGhpcy5yZXNwb25zZSk7XHJcbiAgICAgICAgdmFyIGxpc3QgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3NlYXJjaC1yZXN1bHRzXCIpO1xyXG5cclxuICAgICAgICB3aGlsZSAobGlzdC5maXJzdENoaWxkICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIGxpc3QuZmlyc3RDaGlsZC5yZW1vdmUoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChkYXRhID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgIGhpZGVTcGlubmVyKCk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxpc3Quc3R5bGUuZGlzcGxheSA9IFwiaW5oZXJpdFwiO1xyXG5cclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRhdGEubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgdmFyIGVsZW1lbnQgICAgICAgID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxpXCIpO1xyXG4gICAgICAgICAgICB2YXIgbGluayAgICAgICAgICAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYVwiKTtcclxuICAgICAgICAgICAgdmFyIGNvbnRlbnRXcmFwcGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgICAgICAgICAgdmFyIGNvbnRlbnRJbWFnZSAgID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImltZ1wiKTtcclxuICAgICAgICAgICAgdmFyIGNvbnRlbnRUZXh0ICAgID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInBcIik7XHJcblxyXG4gICAgICAgICAgICBlbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJtZW51LWl0ZW1cIik7XHJcbiAgICAgICAgICAgIGxpbmsuc2V0QXR0cmlidXRlKFwiaHJlZlwiLCBcImhpc3RvcnkuaHRtbD9pdGVtSWQ9XCIgKyBkYXRhW2ldLmlkKTtcclxuICAgICAgICAgICAgY29udGVudFdyYXBwZXIuY2xhc3NMaXN0LmFkZChcInRpbGVcIiwgXCJ0aWxlLWNlbnRlcmVkXCIpXHJcbiAgICAgICAgICAgIGNvbnRlbnRJbWFnZS5zZXRBdHRyaWJ1dGUoXCJzcmNcIiwgQkFTRV9JQ09OX1VSTCArIGRhdGFbaV0uaWNvbiArIFwiLmpwZ1wiKTtcclxuICAgICAgICAgICAgY29udGVudEltYWdlLmNsYXNzTGlzdC5hZGQoXCJ0aWxlLWljb25cIik7XHJcbiAgICAgICAgICAgIGNvbnRlbnRUZXh0LmNsYXNzTGlzdC5hZGQoXCJ0aWxlLWNvbnRlbnRcIik7XHJcbiAgICAgICAgICAgIGNvbnRlbnRUZXh0LnRleHRDb250ZW50ID0gZGF0YVtpXS5uYW1lO1xyXG5cclxuICAgICAgICAgICAgY29udGVudFdyYXBwZXIuYXBwZW5kQ2hpbGQoY29udGVudEltYWdlKTtcclxuICAgICAgICAgICAgY29udGVudFdyYXBwZXIuYXBwZW5kQ2hpbGQoY29udGVudFRleHQpO1xyXG4gICAgICAgICAgICBsaW5rLmFwcGVuZENoaWxkKGNvbnRlbnRXcmFwcGVyKTtcclxuICAgICAgICAgICAgZWxlbWVudC5hcHBlbmRDaGlsZChsaW5rKTtcclxuICAgICAgICAgICAgbGlzdC5hcHBlbmRDaGlsZChlbGVtZW50KTtcclxuICAgICAgICAgICAgZWxlbWVudC5hcHBlbmRDaGlsZChsaW5rKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGhpZGVTcGlubmVyKCk7XHJcbiAgICB9O1xyXG5cclxuICAgIHZhciBoaWRlU3Bpbm5lciA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuZm9ybS1pY29uXCIpLmNsYXNzTGlzdC5yZW1vdmUoXCJsb2FkaW5nXCIpO1xyXG4gICAgfVxyXG5cclxuICAgIHZhciBpbml0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdmFyIHRleHRGaWVsZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNzZWFyY2gtdGV4dCcpXHJcblxyXG4gICAgICAgIHRleHRGaWVsZC5hZGRFdmVudExpc3RlbmVyKFwiaW5wdXRcIiwgZnVuY3Rpb24oZXZlbnQpIHtcclxuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aW1lcikgY2xlYXJUaW1lb3V0KHRpbWVyKTtcclxuXHJcbiAgICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuZm9ybS1pY29uXCIpLmNsYXNzTGlzdC5hZGQoXCJsb2FkaW5nXCIpO1xyXG5cclxuICAgICAgICAgICAgLy8gVE9ETzogVHJpZ2dlciBzZW5kUXVlcnkgb24gcGFnZSBsb2FkIGlmIHRleHQgaXMgaW4gdGhlIGlucHV0PyBPciBvbiBmb2N1cz9cclxuICAgICAgICAgICAgdGltZXIgPSBzZXRUaW1lb3V0KHNlbmRRdWVyeSwgMTAwMCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG5cclxuICAgIHZhciBzZW5kUXVlcnkgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICB0aW1lciA9IG51bGw7XHJcbiAgICAgICAgdmFyIHF1ZXJ5ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNzZWFyY2gtdGV4dFwiKS52YWx1ZTtcclxuXHJcbiAgICAgICAgaWYgKHF1ZXJ5Lmxlbmd0aCA8IDMpIHtcclxuICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNzZWFyY2gtcmVzdWx0c1wiKS5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XHJcbiAgICAgICAgICAgIGhpZGVTcGlubmVyKCk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBvUmVxID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XHJcbiAgICAgICAgb1JlcS5hZGRFdmVudExpc3RlbmVyKFwibG9hZFwiLCBjYWxsYmFjayk7XHJcbiAgICAgICAgb1JlcS5vcGVuKFwiR0VUXCIsIFwibmFtZXM/c2VhcmNoPVwiICsgcXVlcnkpO1xyXG4gICAgICAgIG9SZXEuc2VuZCgpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgaW5pdDogaW5pdCxcclxuICAgICAgICBnZXRUaW1lcjogZnVuY3Rpb24oKSB7IHJldHVybiB0aW1lcjsgfVxyXG4gICAgfTtcclxufTsiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcclxuICAgIHZhciBCQVNFX0lDT05fVVJMID0gXCJodHRwczovL3dvdy56YW1pbWcuY29tL2ltYWdlcy93b3cvaWNvbnMvbGFyZ2UvXCI7XHJcbiAgICB2YXIgX2NoYXJ0ICAgICAgICA9IG51bGw7XHJcbiAgICB2YXIgX2RhdGEgICAgICAgICA9IG51bGw7XHJcbiAgICB2YXIgX2ljb25VcmwgICAgICA9IG51bGw7XHJcbiAgICB2YXIgX2l0ZW1JZCAgICAgICA9IG5ldyBVUkwod2luZG93LmxvY2F0aW9uLmhyZWYpLnNlYXJjaFBhcmFtcy5nZXQoXCJpdGVtSWRcIik7XHJcbiAgICB2YXIgX21heFZvbHVtZSAgICA9IG51bGw7XHJcblxyXG4gICAgdmFyIGNhbGxiYWNrID0gZnVuY3Rpb24gKGV2dCkge1xyXG4gICAgICAgIF9kYXRhICAgICAgPSBKU09OLnBhcnNlKHRoaXMucmVzcG9uc2UsIHBhcnNlRGF0ZSk7XHJcbiAgICAgICAgX2ljb25VcmwgICA9IEJBU0VfSUNPTl9VUkwgKyBfZGF0YS5pY29uICsgXCIuanBnXCI7XHJcbiAgICAgICAgX21heFZvbHVtZSA9IE1hdGgubWF4KC4uLl9kYXRhLnBlcmlvZHMubWFwKGZ1bmN0aW9uKGkpIHsgcmV0dXJuIGkudm9sdW1lOyB9KSk7XHJcblxyXG4gICAgICAgIGRyYXcoKTtcclxuICAgICAgICBcclxuICAgICAgICBpZiAod2luZG93LmlubmVyV2lkdGggPCA2MDApIHtcclxuICAgICAgICAgICAgX2NoYXJ0LmF4aXNYWzBdLnNldChcInZpZXdwb3J0TWluaW11bVwiLCBfZGF0YS5wZXJpb2RzWzZdLmNyZWF0ZWRfYXQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW1nXCIpO1xyXG4gICAgICAgIHZhciBwYXJlbnQgID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNjaGFydC1tYWluXCIpO1xyXG4gICAgICAgIHZhciBzaWJsaW5nID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNjaGFydC1jb250YWluZXJcIik7XHJcblxyXG4gICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKFwic3JjXCIsIF9pY29uVXJsKTtcclxuICAgICAgICBlbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJjaGFydC1pY29uXCIpO1xyXG4gICAgICAgIHBhcmVudC5pbnNlcnRCZWZvcmUoZWxlbWVudCwgc2libGluZyk7XHJcblxyXG4gICAgICAgIHBvcHVsYXRlVGFibGVEYXRhKCk7XHJcbiAgICB9O1xyXG5cclxuICAgIHZhciBkcmF3ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgX2NoYXJ0ID0gbmV3IENhbnZhc0pTLkNoYXJ0KFwiY2hhcnQtY29udGFpbmVyXCIsXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGNvbG9yU2V0OiBcInNwZWN0cmVDb2xvclNldFwiLFxyXG4gICAgICAgICAgICAgICAgdG9vbFRpcDogV293VHJlbmRzLkNoYXJ0LnRvb2xUaXAsXHJcbiAgICAgICAgICAgICAgICB0aXRsZToge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvbnRDb2xvcjogXCIjNDU0ZDVkXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgaG9yaXpvbnRhbEFsaWduOiBcImxlZnRcIixcclxuICAgICAgICAgICAgICAgICAgICBwYWRkaW5nOiB7IHRvcDogMCwgbGVmdDogMjAsIHJpZ2h0OiAwLCBib3R0b206IDAgfSxcclxuICAgICAgICAgICAgICAgICAgICB0ZXh0OiBfZGF0YS5uYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgIGZvbnRGYW1pbHk6ICdTZWdvZSBVSSwgUm9ib3RvLCBIZWx2ZXRpY2EgTmV1ZSwgc2Fucy1zZXJpZicsXHJcbiAgICAgICAgICAgICAgICAgICAgZm9udFNpemU6IDMwLFxyXG4gICAgICAgICAgICAgICAgICAgIGZvbnRXZWlnaHQ6IFwiYm9sZFwiXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgc3VidGl0bGVzOiBXb3dUcmVuZHMuQ2hhcnQuc3VidGl0bGVzLmJ1aWxkKCksXHJcbiAgICAgICAgICAgICAgICB6b29tRW5hYmxlZDogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIGF4aXNZOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaW5jbHVkZVplcm86IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiBcIlByaWNlXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgcHJlZml4OiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGxhYmVsRm9ybWF0dGVyOiBmdW5jdGlvbihlKSB7IHJldHVybiBmb3JtYXRQcmljZShlLnZhbHVlKTsgfVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGF4aXNZMjoge1xyXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiBcIlZvbHVtZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGluY2x1ZGVaZXJvOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgIG1heGltdW06IDMgKiBfbWF4Vm9sdW1lXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgYXhpc1g6IHtcclxuICAgICAgICAgICAgICAgICAgICBzY2FsZUJyZWFrczoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhdXRvQ2FsY3VsYXRlOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xsYXBzaWJsZVRocmVzaG9sZDogXCIxMCVcIlxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJ2YWw6IDI0LFxyXG4gICAgICAgICAgICAgICAgICAgIGludGVydmFsVHlwZTogXCJob3VyXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgdmFsdWVGb3JtYXRTdHJpbmc6IFwiREQgTU1NXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgbGFiZWxBbmdsZTogLTQ1LFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHpvb21FbmFibGVkOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgZGF0YTogW1xyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJjYW5kbGVzdGlja1wiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhUG9pbnRzOiBmb3JtYXREYXRhKCksXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiVm9sdW1lXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFwibGluZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBheGlzWVR5cGU6IFwic2Vjb25kYXJ5XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFQb2ludHM6IGZvcm1hdFZvbHVtZURhdGEoKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2hvd0luTGVnZW5kOiB0cnVlXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiNy1EYXkgQXZlcmFnZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzaG93SW5MZWdlbmQ6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFwibGluZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBheGlzWVR5cGU6IFwicHJpbWFyeVwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhUG9pbnRzOiBmb3JtYXRBdmVyYWdlRGF0YSgpXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgXVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICBfY2hhcnQucmVuZGVyKCk7XHJcbiAgICB9XHJcblxyXG4gICAgdmFyIGZvcm1hdERhdGEgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIF9kYXRhLnBlcmlvZHMubWFwKGZ1bmN0aW9uIChpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB7IHg6IGkuY3JlYXRlZF9hdCwgeTogW2kub3BlbiwgaS5oaWdoLCBpLmxvdywgaS5jbG9zZV0sIGxhYmVsOiBpLmNyZWF0ZWRfYXQgfTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcblxyXG4gICAgdmFyIGZvcm1hdEF2ZXJhZ2VEYXRhID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgcmV0dXJuIF9kYXRhLnBlcmlvZHMubWFwKGZ1bmN0aW9uKGkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHsgeDogaS5jcmVhdGVkX2F0LCB5OiBpLmF2ZXJhZ2UgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuXHJcbiAgICB2YXIgZm9ybWF0Vm9sdW1lRGF0YSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiBfZGF0YS5wZXJpb2RzLm1hcChmdW5jdGlvbihpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB7IHg6IGkuY3JlYXRlZF9hdCwgeTogaS52b2x1bWUgfTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcblxyXG4gICAgdmFyIGZvcm1hdFByaWNlID0gZnVuY3Rpb24oY29wcGVyKSB7XHJcbiAgICAgICAgaWYgKGNvcHBlciA+IDEwMDAwKSByZXR1cm4gQ2FudmFzSlMuZm9ybWF0TnVtYmVyKE1hdGguZmxvb3IoY29wcGVyIC8gMTAwMDApKSArIFwiR1wiO1xyXG4gICAgICAgIGlmIChjb3BwZXIgPiAxMDApIHJldHVybiBNYXRoLmZsb29yKGNvcHBlciAvIDEwMCkgKyBcIlNcIjtcclxuICAgICAgICByZXR1cm4gY29wcGVyICsgXCJDXCI7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBGb3JtYXQgYSBwcmljZSBhcyBcIlggZ29sZCwgWSBzaWx2ZXIsIFogY29wcGVyXCJcclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBjb3BwZXIgLSBUaGUgcHJpY2UgaW4gY29wcGVyIHBpZWNlcy5cclxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XHJcbiAgICAgKi9cclxuICAgIHZhciBmb3JtYXRQcmljZUxvbmcgPSBmdW5jdGlvbihjb3BwZXIpIHtcclxuICAgICAgICB2YXIgZ29sZCA9IENhbnZhc0pTLmZvcm1hdE51bWJlcihNYXRoLmZsb29yKGNvcHBlciAvIDEwMDAwKSk7XHJcblxyXG4gICAgICAgIGNvcHBlciA9IGNvcHBlciAlIDEwMDAwXHJcblxyXG4gICAgICAgIHZhciBzaWx2ZXIgPSBNYXRoLmZsb29yKGNvcHBlciAvIDEwMCkgJSAxMDA7XHJcblxyXG4gICAgICAgIGNvcHBlciA9IGNvcHBlciAlIDEwMDtcclxuXHJcbiAgICAgICAgcmV0dXJuIGdvbGQgKyBcIiBnb2xkLCBcIiArIHNpbHZlciArIFwiIHNpbHZlciwgXCIgKyBjb3BwZXIgKyBcIiBjb3BwZXJcIjtcclxuICAgIH07XHJcblxyXG4gICAgdmFyIGluaXQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKF9pdGVtSWQgPT09IG51bGwpIHJldHVybjtcclxuXHJcbiAgICAgICAgdmFyIG9SZXEgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcclxuICAgICAgICBvUmVxLmFkZEV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsIGNhbGxiYWNrKTtcclxuICAgICAgICBvUmVxLm9wZW4oXCJHRVRcIiwgXCJkZXRhaWxzP2l0ZW1JZD1cIiArIF9pdGVtSWQpO1xyXG4gICAgICAgIG9SZXEuc2VuZCgpO1xyXG4gICAgfTtcclxuXHJcbiAgICB2YXIgcGFyc2VEYXRlID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcclxuICAgICAgICB2YXIgYTtcclxuXHJcbiAgICAgICAgaWYgKGtleSA9PT0gJ2NyZWF0ZWRfYXQnICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgYSA9IC8oXFxkKyktKFxcZCspLShcXGQrKVQoXFxkKyk6KFxcZCspOihcXGQrKS8uZXhlYyh2YWx1ZSlcclxuICAgICAgICAgICAgaWYgKGEpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgRGF0ZShhWzFdLCBhWzJdIC0gMSwgYVszXSwgYVs0XSwgYVs1XSwgYVs2XSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICB2YXIgcG9wdWxhdGVUYWJsZURhdGEgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgaGlnaEZvdXJ0ZWVuID0gTWF0aC5tYXgoLi4uX2RhdGEucGVyaW9kcy5zbGljZSgwLDE0KS5tYXAoZnVuY3Rpb24oaSkgeyByZXR1cm4gaS5oaWdoIH0pKTtcclxuICAgICAgICB2YXIgbG93Rm91cnRlZW4gPSBNYXRoLm1heCguLi5fZGF0YS5wZXJpb2RzLnNsaWNlKDAsMTQpLm1hcChmdW5jdGlvbihpKSB7IHJldHVybiBpLmxvdyB9KSk7XHJcblxyXG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZGF0YS10YWJsZS1vcGVuXCIpLmlubmVyVGV4dCA9IGZvcm1hdFByaWNlKF9kYXRhLnBlcmlvZHNbMF0ub3Blbik7XHJcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJkYXRhLXRhYmxlLWNsb3NlXCIpLmlubmVyVGV4dCA9IGZvcm1hdFByaWNlKF9kYXRhLnBlcmlvZHNbMF0uY2xvc2UpO1xyXG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZGF0YS10YWJsZS1oaWdoXCIpLmlubmVyVGV4dCA9IGZvcm1hdFByaWNlKF9kYXRhLnBlcmlvZHNbMF0uaGlnaCk7XHJcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJkYXRhLXRhYmxlLWxvd1wiKS5pbm5lclRleHQgPSBmb3JtYXRQcmljZShfZGF0YS5wZXJpb2RzWzBdLmxvdyk7XHJcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJkYXRhLXRhYmxlLWhpZ2gtMTRcIikuaW5uZXJUZXh0ID0gZm9ybWF0UHJpY2UoaGlnaEZvdXJ0ZWVuKTtcclxuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImRhdGEtdGFibGUtbG93LTE0XCIpLmlubmVyVGV4dCA9IGZvcm1hdFByaWNlKGxvd0ZvdXJ0ZWVuKTtcclxuICAgIH07XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBmb3JtYXRQcmljZUxvbmc6IGZvcm1hdFByaWNlTG9uZyxcclxuICAgICAgICBnZXRDaGFydDogZnVuY3Rpb24gKCkgeyByZXR1cm4gX2NoYXJ0OyB9LFxyXG4gICAgICAgIGdldERhdGE6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIF9kYXRhOyB9LFxyXG4gICAgICAgIGluaXQ6IGluaXRcclxuICAgIH07XHJcbn07XHJcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xyXG4gICAgdmFyIHByaWNlV2l0aENoYW5nZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciBkYXRhICAgICAgICA9IFdvd1RyZW5kcy5DaGFydC5nZXREYXRhKCk7XHJcbiAgICAgICAgdmFyIGRpZmZlcmVuY2UgID0gZGF0YS5wZXJpb2RzWzBdLmFzayAtIGRhdGEucGVyaW9kc1swXS5vcGVuO1xyXG4gICAgICAgIHZhciBwbHVzT3JNaW51cyA9IGRpZmZlcmVuY2UgPCAwID8gXCJcIiA6IFwiK1wiO1xyXG4gICAgICAgIHZhciBwZXJjZW50YWdlICA9ICgoZGlmZmVyZW5jZSAvIGRhdGEucGVyaW9kc1swXS5hc2spICogMTAwKS50b0ZpeGVkKDEpO1xyXG4gICAgICAgIHZhciB0ZXh0ICAgICAgICA9IFdvd1RyZW5kcy5DaGFydC5mb3JtYXRQcmljZUxvbmcoZGF0YS5jdXJyZW50KSArIFwiIChcIiArIHBsdXNPck1pbnVzICsgKGRpZmZlcmVuY2UgLyAxMDAwMCkgKyBcIkcgLyBcIiArIHBlcmNlbnRhZ2UgKyBcIiUpXCI7XHJcblxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGZvbnRDb2xvcjogXCIjNDU0ZDVkXCIsXHJcbiAgICAgICAgICAgIHRleHQ6IHRleHQsXHJcbiAgICAgICAgICAgIGhvcml6b250YWxBbGlnbjogXCJsZWZ0XCIsXHJcbiAgICAgICAgICAgIGZvbnRGYW1pbHk6ICdTZWdvZSBVSSwgUm9ib3RvLCBIZWx2ZXRpY2EgTmV1ZSwgc2Fucy1zZXJpZicsXHJcbiAgICAgICAgICAgIGZvbnRTaXplOiAyMCxcclxuICAgICAgICAgICAgcGFkZGluZzogeyB0b3A6IDAsIGxlZnQ6IDIwLCByaWdodDogMCwgYm90dG9tOiAxMCB9XHJcbiAgICAgICAgfTtcclxuICAgIH07XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBidWlsZDogZnVuY3Rpb24oKSB7IHJldHVybiBbcHJpY2VXaXRoQ2hhbmdlKCldIH1cclxuICAgIH07XHJcbn07XHJcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gZXZlbnQgLSBUaGUgY2hhcnQgZGF0YSBwcm92aWRlZCBieSBDYW52YXNKUy5cclxuICAgICAqIEBwYXJhbSB7T2JqZWN0W119IGV2ZW50LmVudHJpZXMgLSBBbGwgb2YgdGhlIGRhdGEgc2VyaWVzIGF2YWlsYWJsZSB0byB0aGUgY2hhcnQuXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gZXZlbnQuZW50cmllc1tdLmRhdGFQb2ludCAtIEFuIGluZGl2aWR1YWwgZGF0YSBwb2ludC5cclxuICAgICAqL1xyXG4gICAgdmFyIGdldFRvb2xUaXAgPSBmdW5jdGlvbihldmVudCkge1xyXG4gICAgICAgIHZhciBwb2ludCA9IGV2ZW50LmVudHJpZXNbMF0uZGF0YVBvaW50O1xyXG4gICAgICAgIHZhciBzdHIgPSBcIlwiO1xyXG5cclxuICAgICAgICBzdHIgKz0gXCI8c3Ryb25nPlwiICsgcG9pbnQubGFiZWwgKyBcIjwvc3Ryb25nPlwiO1xyXG4gICAgICAgIHN0ciArPSBcIjxiciAvPlwiO1xyXG4gICAgICAgIHN0ciArPSBcIjxzdHJvbmc+T3Blbjo8L3N0cm9uZz4gXCIgKyBwb2ludC55WzBdIC8gMTAwMDAgKyBcIkc8YnIgLz5cIjtcclxuICAgICAgICBzdHIgKz0gXCI8c3Ryb25nPkhpZ2g6PC9zdHJvbmc+IFwiICsgcG9pbnQueVsxXSAvIDEwMDAwICsgXCJHPGJyIC8+XCI7XHJcbiAgICAgICAgc3RyICs9IFwiPHN0cm9uZz5Mb3c6PC9zdHJvbmc+IFwiICsgcG9pbnQueVsyXSAvIDEwMDAwICsgXCJHPGJyIC8+XCI7XHJcbiAgICAgICAgc3RyICs9IFwiPHN0cm9uZz5DbG9zZTo8L3N0cm9uZz4gXCIgKyBwb2ludC55WzNdIC8gMTAwMDAgKyBcIkc8YnIgLz5cIjtcclxuICAgICAgICBzdHIgKz0gXCI8c3Ryb25nPlZvbHVtZTo8L3N0cm9uZz4gXCIgKyBldmVudC5lbnRyaWVzWzFdLmRhdGFQb2ludC55ICsgXCJHPGJyIC8+XCI7XHJcbiAgICAgICAgc3RyICs9IFwiPHN0cm9uZz43LURheSBBdmc6PC9zdHJvbmc+IFwiICsgZXZlbnQuZW50cmllc1syXS5kYXRhUG9pbnQueSAvIDEwMDAwICsgXCJHXCI7XHJcblxyXG4gICAgICAgIHJldHVybiBzdHI7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBzaGFyZWQ6IHRydWUsXHJcbiAgICAgICAgY29udGVudEZvcm1hdHRlcjogZ2V0VG9vbFRpcFxyXG4gICAgfTtcclxufTtcclxuIl0sInNvdXJjZVJvb3QiOiIifQ==