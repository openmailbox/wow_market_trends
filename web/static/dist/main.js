!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=5)}([function(e,t,n){var r=n(1);"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(3)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){(e.exports=n(2)(!1)).push([e.i,"header {\n  margin-bottom: 1em;\n}\n\n.chart-icon {\n  margin-left: 2em;\n}\n\n#chart-container {\n  height: 300px;\n  width: 100%;\n}\n\n#chart-main {\n  margin: 1em 0;\n}\n\n#search-results {\n    display: none;\n    max-height: 15em;\n    overflow: auto;\n    overflow-x: hidden;\n    position: absolute;\n    width: 100%;\n}\n\n#search-results img {\n  width: 2em;\n}\n\n#search-results p {\n  margin: 0;\n}\n\n#title-block {\n  margin: 2.5em auto 3em auto;\n  max-width: 40em;\n  text-align: center;\n}\n\n#title-block h1 {\n  margin-bottom: 0;\n}\n\n#title-block h2 {\n  margin-bottom: 0.5em;\n}\n\n#last-updated {\n  margin-top: 1.2em;\n  text-align: center;\n}\n\n#credits {\n  font-size: 0.8em;\n  margin-bottom: 0.2em;\n  text-align: center;\n}\n\n#details {\n  margin-bottom: 1.2em;\n}\n\n#realm {\n  text-align: center;\n}\n\n.fb-like {\n  text-align: center;\n}\n",""])},function(e,t){e.exports=function(e){var t=[];return t.toString=function(){return this.map(function(t){var n=function(e,t){var n=e[1]||"",r=e[3];if(!r)return n;if(t&&"function"==typeof btoa){var o=function(e){return"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(e))))+" */"}(r),i=r.sources.map(function(e){return"/*# sourceURL="+r.sourceRoot+e+" */"});return[n].concat(i).concat([o]).join("\n")}return[n].join("\n")}(t,e);return t[2]?"@media "+t[2]+"{"+n+"}":n}).join("")},t.i=function(e,n){"string"==typeof e&&(e=[[null,e,""]]);for(var r={},o=0;o<this.length;o++){var i=this[o][0];"number"==typeof i&&(r[i]=!0)}for(o=0;o<e.length;o++){var a=e[o];"number"==typeof a[0]&&r[a[0]]||(n&&!a[2]?a[2]=n:n&&(a[2]="("+a[2]+") and ("+n+")"),t.push(a))}},t}},function(e,t,n){var r={},o=function(e){var t;return function(){return void 0===t&&(t=e.apply(this,arguments)),t}}(function(){return window&&document&&document.all&&!window.atob}),i=function(e){var t={};return function(e,n){if("function"==typeof e)return e();if(void 0===t[e]){var r=function(e,t){return t?t.querySelector(e):document.querySelector(e)}.call(this,e,n);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(e){r=null}t[e]=r}return t[e]}}(),a=null,s=0,l=[],c=n(4);function u(e,t){for(var n=0;n<e.length;n++){var o=e[n],i=r[o.id];if(i){i.refs++;for(var a=0;a<i.parts.length;a++)i.parts[a](o.parts[a]);for(;a<o.parts.length;a++)i.parts.push(g(o.parts[a],t))}else{var s=[];for(a=0;a<o.parts.length;a++)s.push(g(o.parts[a],t));r[o.id]={id:o.id,refs:1,parts:s}}}}function d(e,t){for(var n=[],r={},o=0;o<e.length;o++){var i=e[o],a=t.base?i[0]+t.base:i[0],s={css:i[1],media:i[2],sourceMap:i[3]};r[a]?r[a].parts.push(s):n.push(r[a]={id:a,parts:[s]})}return n}function f(e,t){var n=i(e.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=l[l.length-1];if("top"===e.insertAt)r?r.nextSibling?n.insertBefore(t,r.nextSibling):n.appendChild(t):n.insertBefore(t,n.firstChild),l.push(t);else if("bottom"===e.insertAt)n.appendChild(t);else{if("object"!=typeof e.insertAt||!e.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var o=i(e.insertAt.before,n);n.insertBefore(t,o)}}function p(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var t=l.indexOf(e);t>=0&&l.splice(t,1)}function m(e){var t=document.createElement("style");if(void 0===e.attrs.type&&(e.attrs.type="text/css"),void 0===e.attrs.nonce){var r=function(){0;return n.nc}();r&&(e.attrs.nonce=r)}return h(t,e.attrs),f(e,t),t}function h(e,t){Object.keys(t).forEach(function(n){e.setAttribute(n,t[n])})}function g(e,t){var n,r,o,i;if(t.transform&&e.css){if(!(i=t.transform(e.css)))return function(){};e.css=i}if(t.singleton){var l=s++;n=a||(a=m(t)),r=b.bind(null,n,l,!1),o=b.bind(null,n,l,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(e){var t=document.createElement("link");return void 0===e.attrs.type&&(e.attrs.type="text/css"),e.attrs.rel="stylesheet",h(t,e.attrs),f(e,t),t}(t),r=function(e,t,n){var r=n.css,o=n.sourceMap,i=void 0===t.convertToAbsoluteUrls&&o;(t.convertToAbsoluteUrls||i)&&(r=c(r));o&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */");var a=new Blob([r],{type:"text/css"}),s=e.href;e.href=URL.createObjectURL(a),s&&URL.revokeObjectURL(s)}.bind(null,n,t),o=function(){p(n),n.href&&URL.revokeObjectURL(n.href)}):(n=m(t),r=function(e,t){var n=t.css,r=t.media;r&&e.setAttribute("media",r);if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}.bind(null,n),o=function(){p(n)});return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else o()}}e.exports=function(e,t){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(t=t||{}).attrs="object"==typeof t.attrs?t.attrs:{},t.singleton||"boolean"==typeof t.singleton||(t.singleton=o()),t.insertInto||(t.insertInto="head"),t.insertAt||(t.insertAt="bottom");var n=d(e,t);return u(n,t),function(e){for(var o=[],i=0;i<n.length;i++){var a=n[i];(s=r[a.id]).refs--,o.push(s)}e&&u(d(e,t),t);for(i=0;i<o.length;i++){var s;if(0===(s=o[i]).refs){for(var l=0;l<s.parts.length;l++)s.parts[l]();delete r[s.id]}}}};var v=function(){var e=[];return function(t,n){return e[t]=n,e.filter(Boolean).join("\n")}}();function b(e,t,n,r){var o=n?"":r.css;if(e.styleSheet)e.styleSheet.cssText=v(t,o);else{var i=document.createTextNode(o),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(i,a[t]):e.appendChild(i)}}},function(e,t){e.exports=function(e){var t="undefined"!=typeof window&&window.location;if(!t)throw new Error("fixUrls requires window.location");if(!e||"string"!=typeof e)return e;var n=t.protocol+"//"+t.host,r=n+t.pathname.replace(/\/[^\/]*$/,"/");return e.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(e,t){var o,i=t.trim().replace(/^"(.*)"$/,function(e,t){return t}).replace(/^'(.*)'$/,function(e,t){return t});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(i)?e:(o=0===i.indexOf("//")?i:0===i.indexOf("/")?n+i:r+i.replace(/^\.\//,""),"url("+JSON.stringify(o)+")")})}},function(e,t,n){"use strict";n.r(t);n(0);var r=function(e){var t=/(\d+)-(\d+)-(\d+)T(\d+):(\d+):(\d+)/.exec(this.response),n=null;t&&(n=new Date(t[1],t[2]-1,t[3],t[4],t[5],t[6])),document.querySelector("#last-updated").textContent="Last updated "+n.toGMTString()};window.WowTrends={},window.WowTrends.Search=function(){var e=null,t=function(e){for(var t=JSON.parse(this.response),r=document.querySelector("#search-results");null!==r.firstChild;)r.firstChild.remove();if(null!==t){r.style.display="inherit";for(var o=0;o<t.length;o++){var i=document.createElement("li"),a=document.createElement("a"),s=document.createElement("div"),l=document.createElement("img"),c=document.createElement("p");i.classList.add("menu-item"),a.setAttribute("href","history.html?itemId="+t[o].id),s.classList.add("tile","tile-centered"),l.setAttribute("src","https://wow.zamimg.com/images/wow/icons/large/"+t[o].icon+".jpg"),l.classList.add("tile-icon"),c.classList.add("tile-content"),c.textContent=t[o].name,s.appendChild(l),s.appendChild(c),a.appendChild(s),i.appendChild(a),r.appendChild(i),i.appendChild(a)}n()}else n()},n=function(){document.querySelector(".form-icon").classList.remove("loading")},r=function(){e=null;var r=document.querySelector("#search-text").value;if(r.length<3)return document.querySelector("#search-results").style.display="none",void n();var o=new XMLHttpRequest;o.addEventListener("load",t),o.open("GET","names?search="+r),o.send()};return{init:function(){document.querySelector("#search-text").addEventListener("input",function(t){t.preventDefault(),e&&clearTimeout(e),document.querySelector(".form-icon").classList.add("loading"),e=setTimeout(r,1e3)})},getTimer:function(){return e}}}(),window.WowTrends.Chart=function(){var e=null,t=null,n=null,r=new URL(window.location.href).searchParams.get("itemId"),o=null,i=function(r){t=JSON.parse(this.response,d),n="https://wow.zamimg.com/images/wow/icons/large/"+t.icon+".jpg",o=Math.max(...t.periods.map(function(e){return e.volume})),a(),window.innerWidth<600&&e.axisX[0].set("viewportMinimum",t.periods[6].created_at);var i=document.createElement("img"),s=document.querySelector("#chart-main"),l=document.querySelector("#chart-container");i.setAttribute("src",n),i.classList.add("chart-icon"),s.insertBefore(i,l),f()},a=function(){(e=new CanvasJS.Chart("chart-container",{colorSet:"spectreColorSet",toolTip:WowTrends.Chart.toolTip,title:{fontColor:"#454d5d",horizontalAlign:"left",padding:{top:0,left:20,right:0,bottom:0},text:t.name,fontFamily:"Segoe UI, Roboto, Helvetica Neue, sans-serif",fontSize:30,fontWeight:"bold"},subtitles:WowTrends.Chart.subtitles.build(),zoomEnabled:!0,axisY:{includeZero:!1,title:"Price",prefix:"",labelFormatter:function(e){return u(e.value)}},axisY2:{title:"Volume",includeZero:!0,maximum:3*o},axisX:{scaleBreaks:{autoCalculate:!0,collapsibleThreshold:"10%"},interval:24,intervalType:"hour",valueFormatString:"DD MMM",labelAngle:-45},zoomEnabled:!0,data:[{type:"candlestick",dataPoints:s()},{name:"Volume",type:"line",axisYType:"secondary",dataPoints:c(),showInLegend:!0},{name:"7-Day Average",showInLegend:!0,type:"line",axisYType:"primary",dataPoints:l()}]})).render()},s=function(){return t.periods.map(function(e){return{x:e.created_at,y:[e.open,e.high,e.low,e.close],label:e.created_at}})},l=function(){return t.periods.map(function(e){return{x:e.created_at,y:e.average}})},c=function(){return t.periods.map(function(e){return{x:e.created_at,y:e.volume}})},u=function(e){return e>1e4?CanvasJS.formatNumber(Math.floor(e/1e4))+"G":e>100?Math.floor(e/100)+"S":e+"C"},d=function(e,t){var n;return"created_at"===e&&"string"==typeof t&&(n=/(\d+)-(\d+)-(\d+)T(\d+):(\d+):(\d+)/.exec(t))?new Date(n[1],n[2]-1,n[3],n[4],n[5],n[6]):t},f=function(){var e=Math.max(...t.periods.slice(0,14).map(function(e){return e.high})),n=Math.max(...t.periods.slice(0,14).map(function(e){return e.low}));document.getElementById("data-table-open").innerText=u(t.periods[0].open),document.getElementById("data-table-close").innerText=u(t.periods[0].close),document.getElementById("data-table-high").innerText=u(t.periods[0].high),document.getElementById("data-table-low").innerText=u(t.periods[0].low),document.getElementById("data-table-high-14").innerText=u(e),document.getElementById("data-table-low-14").innerText=u(n)};return{formatPriceLong:function(e){var t=CanvasJS.formatNumber(Math.floor(e/1e4));return e%=1e4,t+" gold, "+Math.floor(e/100)%100+" silver, "+(e%=100)+" copper"},getChart:function(){return e},getData:function(){return t},init:function(){if(null!==r){var e=new XMLHttpRequest;e.addEventListener("load",i),e.open("GET","details?itemId="+r),e.send()}}}}(),window.WowTrends.Chart.subtitles={build:function(){return[function(){var e=WowTrends.Chart.getData(),t=e.periods[0].ask-e.periods[0].open,n=t<0?"":"+",r=(t/e.periods[0].ask*100).toFixed(1);return{fontColor:"#454d5d",text:WowTrends.Chart.formatPriceLong(e.current)+" ("+n+t/1e4+"G / "+r+"%)",horizontalAlign:"left",fontFamily:"Segoe UI, Roboto, Helvetica Neue, sans-serif",fontSize:20,padding:{top:0,left:20,right:0,bottom:10}}}()]}},window.WowTrends.Chart.toolTip={shared:!0,contentFormatter:function(e){var t=e.entries[0].dataPoint,n="";return n+="<strong>"+t.label+"</strong>",n+="<br />",n+="<strong>Open:</strong> "+t.y[0]/1e4+"G<br />",n+="<strong>High:</strong> "+t.y[1]/1e4+"G<br />",n+="<strong>Low:</strong> "+t.y[2]/1e4+"G<br />",n+="<strong>Close:</strong> "+t.y[3]/1e4+"G<br />",n+="<strong>Volume:</strong> "+e.entries[1].dataPoint.y+"G<br />",n+="<strong>7-Day Avg:</strong> "+e.entries[2].dataPoint.y/1e4+"G"}},CanvasJS.addColorSet("spectreColorSet",["#5755d9","#32b643","#ffb700","#f1f1fc","#e85600","#454d5d","#727e96","#acb3c2","#e7e9ed","#f0f1f4","#f8f9fa","#fff"]),window.addEventListener("load",function(){window.WowTrends.Search.init(),window.WowTrends.Chart.init(),function(){var e=new XMLHttpRequest;e.addEventListener("load",r),e.open("GET","lastUpdated"),e.send()}()})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,